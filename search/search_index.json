{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unity3D Spline Plus Spline Mesh Deform Spline Path Finding Unreal Engine Spline Plus","title":"Home"},{"location":"#unity3d","text":"Spline Plus Spline Mesh Deform Spline Path Finding","title":"Unity3D"},{"location":"#unreal-engine","text":"Spline Plus","title":"Unreal Engine"},{"location":"Contact/","text":"Send email Twitter Unity Forum","title":"Coordinates"},{"location":"Unity3D/SplineMeshDeform/Extrude/","text":"img { display: block; margin-left: auto; margin-right: auto; } Variables Description Material This is where you can set the material of your extruded mesh , It is recommended to use this to change material instead of using the mesh renderer material slot. Extrude height Change the extrusion height on the Y axis , currently the axis of extrusion supported is Y only, you can rotate your spline plus object to get extrusion on other axis in case it\u2019s needed, Rings The number of ring edges you have in your extrusion shape Cap holes fill both extrusion mesh holes, Two sided Used in case you want your mesh to be visible from both sides, if two sided is not required then it\u2019s better to keep it off for optimization purpose, Flip faces This is used to flip the visible side of your mesh Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Extrude"},{"location":"Unity3D/SplineMeshDeform/Installation/","text":"All Packages from ElseForty are placed in the 'ElseForty' folder once imported. To Add a Spline Plus game object to your scene hierarchy. A Spline Mesh Deform menu will appear at the bottom of the Spline Plus game object Inspector if you have Spline Mesh Deform package installed. This is the list of the modifiers that you can use with your Spline Plus Game object.","title":"Installation"},{"location":"Unity3D/SplineMeshDeform/Introduction/","text":"Spline Mesh Deform is a procedural mesh generation modifiers collection for Spline plus . Mesh Deform A custom meshes procedural mesh generation modifier for Spline Plus. Feartures : Modes: Alignment / Deformation Multiple meshes combination Procedural mesh generation on all spline branches Materials sharing possibility between meshes GPU processing CPU Muli threading processing Translation, rotation, scale with randomization Mirroring Mesh trimming Copy/Past/Duplicate prefab meshes Highly optimized source code Intuitive UI Extrude Extrudes the spline plus shape and transforms it into a mesh with auto generated correct Uvs, tangents and normals. Tube Mesh Tube mesh transforms spline plus branches into fully customizable 3D mesh tubes, this can be used to easily generate pipes and wires in Unity, PlaneMesh Plane mesh is a simple and straightforward sub tool of Spline mesh deform, used to transform the spline plus branches into a plane mesh,this is very similar to the Unity line renderer except this one is controlled by spline nodes and it\u2019s generated for all spline plus branches","title":"Introduction"},{"location":"Unity3D/SplineMeshDeform/Introduction/#mesh-deform","text":"A custom meshes procedural mesh generation modifier for Spline Plus.","title":" Mesh Deform"},{"location":"Unity3D/SplineMeshDeform/Introduction/#feartures","text":"Modes: Alignment / Deformation Multiple meshes combination Procedural mesh generation on all spline branches Materials sharing possibility between meshes GPU processing CPU Muli threading processing Translation, rotation, scale with randomization Mirroring Mesh trimming Copy/Past/Duplicate prefab meshes Highly optimized source code Intuitive UI","title":"Feartures :"},{"location":"Unity3D/SplineMeshDeform/Introduction/#extrude","text":"Extrudes the spline plus shape and transforms it into a mesh with auto generated correct Uvs, tangents and normals.","title":"  Extrude"},{"location":"Unity3D/SplineMeshDeform/Introduction/#tube-mesh","text":"Tube mesh transforms spline plus branches into fully customizable 3D mesh tubes, this can be used to easily generate pipes and wires in Unity,","title":" Tube Mesh"},{"location":"Unity3D/SplineMeshDeform/Introduction/#planemesh","text":"Plane mesh is a simple and straightforward sub tool of Spline mesh deform, used to transform the spline plus branches into a plane mesh,this is very similar to the Unity line renderer except this one is controlled by spline nodes and it\u2019s generated for all spline plus branches","title":" PlaneMesh"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/","text":"img { display: block; margin-left: auto; margin-right: auto; } Settings Variables Description Prefab meshes area This contains a list of prefab meshes of the currently selected branch, Settings bellow are for the selected prefab mesh highlighted in blue as shown in the first image. Prefab mesh name It usually receives the prefab name but it can be edited to whatever text you want. Just click on the text area and start typing for editing. Prefab mesh The prefab mesh used. Materials Material section for the selected prefab mesh. Spline mesh deform supports multiple materials. You can add the selected prefab mesh material to the materials list by setting unique to true so it can be reused by other prefab meshes. This will optimize performance by sharing materials between prefab meshes. Type Currently there are two types supported , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Mesh trim Available only in Deformation Type Define if you want to have the mesh to extend beyond the branch distance limits, available options: None, Left, Right, Both Mirror axis Create a mirror effect on a defined axis, you can use rotation and translation to create a mirroring offset Offset Translate the proceduraly calculated meshes. Rotation Rotate the proceduraly calculated meshes. Lock :Lock the rotation. this is available only in the alignement type. Lock : Off Lock : On Scale Scale the proceduraly calculated meshes Unif : On in case you want to scale in all 3 axes all at once, Off in case you want to scale on separate axis, Rand Used to create a random Offset, Rotation or Scale behaviour Once Rand is set to On then new Offset , Rotation or Scale fields appear , the randomization will be done between the two fields values. Seed Used to change the randomization seed Tiling Used to define how many times you want the mesh to be repeated along the spline. Auto tiling This calculates automatically how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Used to control the space between the meshes of the prefab mesh. Linked/ Unlinked This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction. Deformation processing The processing method used for the deformed mesh calculation , There are 3 options available, GPU , CPU Multi threaded, CPU Single threaded Export Export mesh to an asset file , the file can be found in \"Assets/SMDExport\" Items Menu Right click in your prefab meshes area to open up the items menu for the selected prefab mesh. Variables Description Hide/Unhide Hide/unhide the selected prefab mesh. Delete Delete the selected prefab mesh. Duplicate Duplicate the selected prefab mesh. Copy Copy the selected prefab mesh. To past the copied prefab mesh, click on an empty area in the prefab meshes section and click past.","title":"Mesh Deform"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/#settings","text":"Variables Description Prefab meshes area This contains a list of prefab meshes of the currently selected branch, Settings bellow are for the selected prefab mesh highlighted in blue as shown in the first image. Prefab mesh name It usually receives the prefab name but it can be edited to whatever text you want. Just click on the text area and start typing for editing. Prefab mesh The prefab mesh used. Materials Material section for the selected prefab mesh. Spline mesh deform supports multiple materials. You can add the selected prefab mesh material to the materials list by setting unique to true so it can be reused by other prefab meshes. This will optimize performance by sharing materials between prefab meshes. Type Currently there are two types supported , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Mesh trim Available only in Deformation Type Define if you want to have the mesh to extend beyond the branch distance limits, available options: None, Left, Right, Both Mirror axis Create a mirror effect on a defined axis, you can use rotation and translation to create a mirroring offset Offset Translate the proceduraly calculated meshes. Rotation Rotate the proceduraly calculated meshes. Lock :Lock the rotation. this is available only in the alignement type. Lock : Off Lock : On Scale Scale the proceduraly calculated meshes Unif : On in case you want to scale in all 3 axes all at once, Off in case you want to scale on separate axis, Rand Used to create a random Offset, Rotation or Scale behaviour Once Rand is set to On then new Offset , Rotation or Scale fields appear , the randomization will be done between the two fields values. Seed Used to change the randomization seed Tiling Used to define how many times you want the mesh to be repeated along the spline. Auto tiling This calculates automatically how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Used to control the space between the meshes of the prefab mesh. Linked/ Unlinked This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction. Deformation processing The processing method used for the deformed mesh calculation , There are 3 options available, GPU , CPU Multi threaded, CPU Single threaded Export Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Settings"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/#items-menu","text":"Right click in your prefab meshes area to open up the items menu for the selected prefab mesh. Variables Description Hide/Unhide Hide/unhide the selected prefab mesh. Delete Delete the selected prefab mesh. Duplicate Duplicate the selected prefab mesh. Copy Copy the selected prefab mesh. To past the copied prefab mesh, click on an empty area in the prefab meshes section and click past.","title":"Items Menu"},{"location":"Unity3D/SplineMeshDeform/PlaneMesh/","text":"img { display: block; margin-left: auto; margin-right: auto; } Variables Description Material The Plane mesh material Width Used to change the width of the plane mesh generated Flip faces Used to flip the visible side of your Plane meshes Two sided Used in case you want your Plane meshes to be visible from both sides, it\u2019s recommended to turn this off Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Plane Mesh"},{"location":"Unity3D/SplineMeshDeform/TubeMesh/","text":"img { display: block; margin-left: auto; margin-right: auto; } Variables Description Material The tube mesh material Radius This is the tube radius Segments This is the number of segments the tubes will have, Flip faces Flip the tubes mesh faces Two sides The tube mesh will be visible from inside as from outside if it\u2019s set to true. Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Tube Mesh"},{"location":"Unity3D/SplinePathFinding/Inspector/","text":"Reorderable List Menu Goal Variables Description On/Off switch Enable/disable goal animation. Goal game object slot The game object that you want to use as a goal for your agent game objects to find. Event Button Open goal Events swindow Agent Variables Description On/Off switch Enable/disable agent animation. Agent game object slot Agent game object you want to use to find your goal. Event Button Open agent Events window Selected Goal/Agent Settings Goal Variables Description Branch key Current goal branch key in the editor, To add the branch key select the branch from scene view then click on the \u2018return\u2019 button, the key will be added automatically to the field Distance The current distance of the goal on the branch, the max is the length of the branch. Speed The speed of the goal Acceleration The time in seconds it takes for the goal to gain it\u2019s full speed or completely stop when game starts. Position Translation of the goal, with a button to switch between World and local space. Rotation Rotation of the goal, with a button to turn Rotation On/Off in case it is needed. Animation type Variables Description Auto Animated Move your goal with a defined speed along the spline. Acceleration : this is the time in seconds it takes for the goal to gain it\u2019s full speed or completely stop when game starts. Keyboard Input Move your goal using keyboard inputs, Acceleration : this is the time in seconds it takes for the goal to gain it\u2019s full speed or completely stop when game starts. Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on goal speed\u201d. brakes force will impact the goal speed as its value goes up, Scene Click Move goal to the closest spline vertex in your scene view or game view mouse click. Agent Variables Description Branch key Agent current branch key , this is the branch key the agent will start path following on , To add the branch key, select the branch from scene view then click on the \u2018Return\u2019 button, the key will be added automatically to the field. Distance The current distance of the agent on the branch, the max is the length of the branch. Speed The speed of the agent. Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed.","title":"Inspector"},{"location":"Unity3D/SplinePathFinding/Inspector/#reorderable-list-menu","text":"","title":"Reorderable List Menu"},{"location":"Unity3D/SplinePathFinding/Inspector/#goal","text":"Variables Description On/Off switch Enable/disable goal animation. Goal game object slot The game object that you want to use as a goal for your agent game objects to find. Event Button Open goal Events swindow","title":"Goal"},{"location":"Unity3D/SplinePathFinding/Inspector/#agent","text":"Variables Description On/Off switch Enable/disable agent animation. Agent game object slot Agent game object you want to use to find your goal. Event Button Open agent Events window","title":"Agent"},{"location":"Unity3D/SplinePathFinding/Inspector/#selected-goalagent-settings","text":"","title":"Selected Goal/Agent Settings"},{"location":"Unity3D/SplinePathFinding/Inspector/#goal_1","text":"Variables Description Branch key Current goal branch key in the editor, To add the branch key select the branch from scene view then click on the \u2018return\u2019 button, the key will be added automatically to the field Distance The current distance of the goal on the branch, the max is the length of the branch. Speed The speed of the goal Acceleration The time in seconds it takes for the goal to gain it\u2019s full speed or completely stop when game starts. Position Translation of the goal, with a button to switch between World and local space. Rotation Rotation of the goal, with a button to turn Rotation On/Off in case it is needed.","title":"Goal"},{"location":"Unity3D/SplinePathFinding/Inspector/#animation-type","text":"Variables Description Auto Animated Move your goal with a defined speed along the spline. Acceleration : this is the time in seconds it takes for the goal to gain it\u2019s full speed or completely stop when game starts. Keyboard Input Move your goal using keyboard inputs, Acceleration : this is the time in seconds it takes for the goal to gain it\u2019s full speed or completely stop when game starts. Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on goal speed\u201d. brakes force will impact the goal speed as its value goes up, Scene Click Move goal to the closest spline vertex in your scene view or game view mouse click.","title":"Animation type"},{"location":"Unity3D/SplinePathFinding/Inspector/#agent_1","text":"Variables Description Branch key Agent current branch key , this is the branch key the agent will start path following on , To add the branch key, select the branch from scene view then click on the \u2018Return\u2019 button, the key will be added automatically to the field. Distance The current distance of the agent on the branch, the max is the length of the branch. Speed The speed of the agent. Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed.","title":"Agent"},{"location":"Unity3D/SplinePathFinding/Installation/","text":"All Packages from ElseForty are placed in the 'ElseForty' folder once imported. To Add a Spline Plus game object to your scene hierarchy. To use Spline Path Finding you need to add the script \"PFFollowerClass\" to your Spline Plus GameObject like bellow. The inspector will look like this","title":"Installation"},{"location":"Unity3D/SplinePathFinding/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline Path Finding is a path finding system for splines, it's a combination of the branching spline system Spline Plus and the path finding algorithm Dijkstra, Features Multiple Goals. Multiple agents for each goal. Accurate results Spline editing actions to quickly build big and complex paths. Events for both Goals and Agents All Spline Plus features included Use of Unity Reorderable lists Full source code included Example scenes included","title":"Introduction"},{"location":"Unity3D/SplinePathFinding/Introduction/#features","text":"Multiple Goals. Multiple agents for each goal. Accurate results Spline editing actions to quickly build big and complex paths. Events for both Goals and Agents All Spline Plus features included Use of Unity Reorderable lists Full source code included Example scenes included","title":"Features"},{"location":"Unity3D/SplinePlus/BranchEdit/","text":"Right click in your scene view to bring up the generic menu where you get acces to branch editing actions. Add To add a new branch, select a node from your scene view and click \"Add\" in the items menu, the selected node will be considered as the origin of the newly created branch. Delete To delete a branch, first you select the branch you want to delete then use the \"Delete\" action in the branch section of the items menu. Weld It is done through adding nodes to branch forks, Node= Add= Forks This time you target the already existing nodes that you want your branch to form a bridge with, see image bellow for better understanding Reverse Reverse the direction of the branch selected.","title":"Branch"},{"location":"Unity3D/SplinePlus/BranchEdit/#add","text":"To add a new branch, select a node from your scene view and click \"Add\" in the items menu, the selected node will be considered as the origin of the newly created branch.","title":"Add"},{"location":"Unity3D/SplinePlus/BranchEdit/#delete","text":"To delete a branch, first you select the branch you want to delete then use the \"Delete\" action in the branch section of the items menu.","title":"Delete"},{"location":"Unity3D/SplinePlus/BranchEdit/#weld","text":"It is done through adding nodes to branch forks, Node= Add= Forks This time you target the already existing nodes that you want your branch to form a bridge with, see image bellow for better understanding","title":"Weld"},{"location":"Unity3D/SplinePlus/BranchEdit/#reverse","text":"Reverse the direction of the branch selected.","title":"Reverse"},{"location":"Unity3D/SplinePlus/Events/","text":"Variables Description Title Editable text field to customize your event name Type the type of event you want to use, there are 5 events , Custom, OnAwake, OnMove, IDLE, OnKeyPressed Custom Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met Other Events OnAwake Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game. OnMove Variables Description OnMove Events Events you want to trigger when follower starts moving IDLE Variables Description IDLE Events Events you want to trigger when follower stops moving OnKeyPressed Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"Events"},{"location":"Unity3D/SplinePlus/Events/#custom","text":"Variables Description Branch fork type that is the condition section, the branch fork type you want as a condition for the events scheduled bellow to trigger there are 3 options available Both: No matter what branch fork the follower is on, events scheduled will be triggered once follower is on the defined branch beginning: Events scheduled will be triggered once follower is on the beginning of the branch end: Events scheduled will be triggered once follower is on the end of the branch branch key The branch key of the branch that the scheduled events will trigger once the follower is on. Events the events scheduled to be triggered once one of the conditions on top is met","title":"Custom"},{"location":"Unity3D/SplinePlus/Events/#other-events","text":"","title":"Other Events"},{"location":"Unity3D/SplinePlus/Events/#onawake","text":"Variables Description Delay time The delay time of triggering the OnAwake events listed bellow OnAwake Events Events you want to trigger once you start the game.","title":"OnAwake"},{"location":"Unity3D/SplinePlus/Events/#onmove","text":"Variables Description OnMove Events Events you want to trigger when follower starts moving","title":"OnMove"},{"location":"Unity3D/SplinePlus/Events/#idle","text":"Variables Description IDLE Events Events you want to trigger when follower stops moving","title":"IDLE"},{"location":"Unity3D/SplinePlus/Events/#onkeypressed","text":"Variables Description Key The key code you want to press to trigger the OnPressed events listed bellow. OnPressed Events Events you want to trigger once the key set on top is pressed.","title":"OnKeyPressed"},{"location":"Unity3D/SplinePlus/GeneralInformation/","text":"Node They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , The Number on top is the node index in the selected branch nodes list . Info Click on the node in your scene view to directly select a node. Branch A branch is formed by nodes. the selected branch is marked with green color in your scene view as shown in the image bellow, Info Click on the branch in your scene view to select it. Shared node A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow. Info The node index on top changes based on the branch you're selecting","title":"General information"},{"location":"Unity3D/SplinePlus/GeneralInformation/#node","text":"They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , The Number on top is the node index in the selected branch nodes list . Info Click on the node in your scene view to directly select a node.","title":"Node"},{"location":"Unity3D/SplinePlus/GeneralInformation/#branch","text":"A branch is formed by nodes. the selected branch is marked with green color in your scene view as shown in the image bellow, Info Click on the branch in your scene view to select it.","title":"Branch"},{"location":"Unity3D/SplinePlus/GeneralInformation/#shared-node","text":"A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow. Info The node index on top changes based on the branch you're selecting","title":"Shared node"},{"location":"Unity3D/SplinePlus/Installation/","text":"All Packages from ElseForty are placed in the 'ElseForty' folder once imported. To Add a Spline Plus game object to your scene hierarchy.","title":"Installation"},{"location":"Unity3D/SplinePlus/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline Plus is a compact branching splines system and advanced path following for Unity3D. Feartures Branching Follower types : Simple, Trains Node type : Smooth, Broken, Free Advanced Events system Customizable branch picking behaviour at intersections Spline shape projection Projected path following for simple followers Follower animation type : Auto, Keyboard, Scene click Smooth Acceleration/Deceleration Spline keyboard navigation Node Speed/Normal control Save and append spline data in .SP files Use of Unity Reorderable lists API to Create splines in runtime (Simple /Shared) nodes chamfering Highly optimized Full source code","title":"Introduction"},{"location":"Unity3D/SplinePlus/Introduction/#feartures","text":"Branching Follower types : Simple, Trains Node type : Smooth, Broken, Free Advanced Events system Customizable branch picking behaviour at intersections Spline shape projection Projected path following for simple followers Follower animation type : Auto, Keyboard, Scene click Smooth Acceleration/Deceleration Spline keyboard navigation Node Speed/Normal control Save and append spline data in .SP files Use of Unity Reorderable lists API to Create splines in runtime (Simple /Shared) nodes chamfering Highly optimized Full source code","title":"Feartures"},{"location":"Unity3D/SplinePlus/Node/","text":"The section for the selected node settings Node Points Node points area is used to control the node position and its handles manually from the editor, this can be useful in case you\u2019re seeking precision in positioning your nodes, Node Settings Variables Description Normal Normal value of the selected node, the value is set to zero by default, it varies from -180 to 180 To visualize the normals in your scene view, you have to enable \u201cHelpers\u201d which can be found in the \"Settings\" section, Speed Speed value of the selected node The speed variation [0,100] is represented by a spline color variation, red color means that the speed is minimum at that position, if color is green or gray then speed is maximum Node type The selected node type, Free ,Smooth, broken Shared Node Settings Variables Description Shared node type There are 2 types of shared nodes in Spline plus, Random: represented by a purple sphere, it is used when you want your followers to randomly pick the next branch to take Info: The random branch picking selection will be done between branches 4,3,5 for the example below, branches 4 and 5 are going to be excluded because of the wrong curvature they have, so the only choice left is branch with key 3 In this new example below the random branches picking is going to be done between branches 5,3,4. All branches curvatures are normal in this new case, so all the options are going to be taken into consideration. Defined: represented with a Blue sphere, this is used to predefine the branch you want your followers to take, You have 4 branches to setup, Left , Right, Forward and backward, if a field is left empty then branch picking choice will become random Ps: to add a branch index, you need to first select the branch from the scene view then click on , the branch key will be inserted automatically into the text box.","title":"Node"},{"location":"Unity3D/SplinePlus/Node/#node-points","text":"Node points area is used to control the node position and its handles manually from the editor, this can be useful in case you\u2019re seeking precision in positioning your nodes,","title":"Node Points"},{"location":"Unity3D/SplinePlus/Node/#node-settings","text":"Variables Description Normal Normal value of the selected node, the value is set to zero by default, it varies from -180 to 180 To visualize the normals in your scene view, you have to enable \u201cHelpers\u201d which can be found in the \"Settings\" section, Speed Speed value of the selected node The speed variation [0,100] is represented by a spline color variation, red color means that the speed is minimum at that position, if color is green or gray then speed is maximum Node type The selected node type, Free ,Smooth, broken","title":"Node Settings"},{"location":"Unity3D/SplinePlus/Node/#shared-node-settings","text":"Variables Description Shared node type There are 2 types of shared nodes in Spline plus, Random: represented by a purple sphere, it is used when you want your followers to randomly pick the next branch to take Info: The random branch picking selection will be done between branches 4,3,5 for the example below, branches 4 and 5 are going to be excluded because of the wrong curvature they have, so the only choice left is branch with key 3 In this new example below the random branches picking is going to be done between branches 5,3,4. All branches curvatures are normal in this new case, so all the options are going to be taken into consideration. Defined: represented with a Blue sphere, this is used to predefine the branch you want your followers to take, You have 4 branches to setup, Left , Right, Forward and backward, if a field is left empty then branch picking choice will become random Ps: to add a branch index, you need to first select the branch from the scene view then click on , the branch key will be inserted automatically into the text box.","title":"Shared Node Settings"},{"location":"Unity3D/SplinePlus/NodeEdit/","text":"Spline editing actions are done through the items menu, right click in your scene view to open the items menu. Add Forks if spline plus has zero branches then a new branch is created automatically and a new node is added to the newly created branch at the mouse position click, if both branch forks are welded then the action of adding a new node is aborted, if both branch forks are unwelded, then the bridge with the newly created node is established with the branch fork with less distance to the mouse position click, if the branch has only one unwelded fork then the connection is established with the unwelded fork, Middle Hold \"Shift key\" on the keyboard , you will get a \u201cyellow\u201d sphere traveling along the selected branch based on mouse position, once you are on the desirable position, perform a mouse click to add your node. Delete To delete a node there are two methods, - First one is by using the shortcut key \"Back space\" while selecting the node you want to delete. - Second is through items menu Hide/Unhide handles Hide/Unhide nodes handles this can be done through Node= Hide/Unhide handles or using the shortcut key \"H\" Chamfer Chamfer regular and shared nodes, once this action is triggered you get a message box to control your smooth radius, Flip Handles This flips the handles position of the selected node, this is very useful when drawing your spline, it helps you get the desirable spline shape you want.","title":"Node"},{"location":"Unity3D/SplinePlus/NodeEdit/#add","text":"","title":"Add"},{"location":"Unity3D/SplinePlus/NodeEdit/#forks","text":"if spline plus has zero branches then a new branch is created automatically and a new node is added to the newly created branch at the mouse position click, if both branch forks are welded then the action of adding a new node is aborted, if both branch forks are unwelded, then the bridge with the newly created node is established with the branch fork with less distance to the mouse position click, if the branch has only one unwelded fork then the connection is established with the unwelded fork,","title":"Forks"},{"location":"Unity3D/SplinePlus/NodeEdit/#middle","text":"Hold \"Shift key\" on the keyboard , you will get a \u201cyellow\u201d sphere traveling along the selected branch based on mouse position, once you are on the desirable position, perform a mouse click to add your node.","title":"Middle"},{"location":"Unity3D/SplinePlus/NodeEdit/#delete","text":"To delete a node there are two methods, - First one is by using the shortcut key \"Back space\" while selecting the node you want to delete. - Second is through items menu","title":"Delete"},{"location":"Unity3D/SplinePlus/NodeEdit/#hideunhide-handles","text":"Hide/Unhide nodes handles this can be done through Node= Hide/Unhide handles or using the shortcut key \"H\"","title":"Hide/Unhide handles"},{"location":"Unity3D/SplinePlus/NodeEdit/#chamfer","text":"Chamfer regular and shared nodes, once this action is triggered you get a message box to control your smooth radius,","title":"Chamfer"},{"location":"Unity3D/SplinePlus/NodeEdit/#flip-handles","text":"This flips the handles position of the selected node, this is very useful when drawing your spline, it helps you get the desirable spline shape you want.","title":"Flip Handles"},{"location":"Unity3D/SplinePlus/Projection/","text":"Project the spline into 3D mesh if found , if no 3D mesh is found then projection is done on the current Unity scene grid, For this to work, the meshes where the spline plus object is being projected needs to have a 3D collider on. Variables Description Project Spline trigger a spline shape projection Raycast length The length of the projection raycast. Offset The local translation offset applied to the spline on the Y axis in case offsetting spline is required. Show projection rays Used to display the rays in your scene view. Handles projection Enables the handles projection as well, this will increases projection precision. Mesh orientation Override the spline normals with the projection mesh normals.","title":"Projection"},{"location":"Unity3D/SplinePlus/SceneViewUI/","text":"Debuging Area Used to display the data you are currently selecting Variables Description Connected branches The branch keys connected to the selected node in case one is selected Branch The selected branch key in the branches dictionary Node The node index in the nodes list of the selected branch is displayed on top like image bellow This also helps determine the direction of the branch, the beginning of the branch is the node with index zero, the end of the branch is the node with the highest index.","title":"Scene view UI"},{"location":"Unity3D/SplinePlus/SceneViewUI/#debuging-area","text":"Used to display the data you are currently selecting Variables Description Connected branches The branch keys connected to the selected node in case one is selected Branch The selected branch key in the branches dictionary Node The node index in the nodes list of the selected branch is displayed on top like image bellow This also helps determine the direction of the branch, the beginning of the branch is the node with index zero, the end of the branch is the node with the highest index.","title":"Debuging Area"},{"location":"Unity3D/SplinePlus/Settings/","text":"Variables Description Reference axis The spline normals default direction, this is used to change the reference normal direction of the spline, it is very useful when changing the scene view mode Smoothness This changes the number of vertices between two nodes, it controls the smoothness of your spline curve. Interpolate rotation this smooths rotation when path following if set to true. Constant speed Enable/disable speed variation on nodes. set this to Off if you are not using node speed variation Gizmos This hides and unhides the gizmos in your scene view. Gizmos size This appears only if gizmos is set to On, This allows you to control the size of the gizmos in you scene view . Helpers This hides and unhides the normals tangents representation in the scene view Helpers size This appears only if helpers is set to \"On\", this controls the helpers size. Node type the default node type you want to use when adding new nodes. Secondary handles This hides and unhides secondary handles of the selected node. Gizmo colors Editor node gizmo colors can be changed from here","title":"Settings"},{"location":"Unity3D/SplinePlus/Shortcuts/","text":"\u201cBackSpace key\u201d Delete the selected node \u201cS key\u201d Convert selected type mode to Smooth \u201cB key\u201d Convert selected type mode to broken \u201cF key\u201d Convert selected type mode to free \u201cZ key\u201d Focus scene view camera on the selected node \u201cH key\u201d Hide/Unhide node handles \u201cR key\u201d Reverse branch direction \u201cEscape key\u201d Reset editing mode to default \"selection\"","title":"Shortcuts"},{"location":"Unity3D/SplinePlus/Simple/","text":"This is the most basic follower type in Spline Plus Variables Description On/Off switch Enable/Disable follower animation. Follower game object slot The game object that you want to use as follower, \"Event\" button This opens the Follower Events window, Selected Settings Variables Description Branch key the current branch key the follower is on, To set a branch key for the follower, select the branch from your scene view then click on Distance The current distance of the follower on the branch, the max is the length of the branch. Speed The speed of the follower. Position Translation of the follower with a button to switch between World and local space. Rotation Rotation of the follower, with a button to turn Rotation On/Off in case this was needed. Follower animation type \u201cAuto animated\u201d move your follower with a defined speed along the spline. \u201cKeyboard input\u201d move your follower using keyboard inputs, \u201cScene click\u201d move your follower to the closest spline vertex to your scene view mouse click. Animation type Variables Description Auto Animated Move your follower with a defined speed along the spline. Acceleration : this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Keyboard Input Move your follower using keyboard inputs, Acceleration : this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction: this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Scene Click Move follower to the closest spline vertex in your scene view or game view mouse click. Projected Path Following Projected path following is using raycasting on followers to sense its surroundings, the path following data is gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by followers, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow when \u201cProjected Path Following\" is set to On, you get the following settings which will allow you to perform advanced customization Variables Description Layer Mask Specifies layers to use for your projection rays Ray transform Used to define the transform that will hold the rays. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Follow Ground Normal The follower will use the ground mesh normals if set to true, if set to false, follower will use spline normals data instead.","title":"Simple"},{"location":"Unity3D/SplinePlus/Simple/#selected-settings","text":"Variables Description Branch key the current branch key the follower is on, To set a branch key for the follower, select the branch from your scene view then click on Distance The current distance of the follower on the branch, the max is the length of the branch. Speed The speed of the follower. Position Translation of the follower with a button to switch between World and local space. Rotation Rotation of the follower, with a button to turn Rotation On/Off in case this was needed. Follower animation type \u201cAuto animated\u201d move your follower with a defined speed along the spline. \u201cKeyboard input\u201d move your follower using keyboard inputs, \u201cScene click\u201d move your follower to the closest spline vertex to your scene view mouse click.","title":"Selected Settings"},{"location":"Unity3D/SplinePlus/Simple/#animation-type","text":"Variables Description Auto Animated Move your follower with a defined speed along the spline. Acceleration : this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Keyboard Input Move your follower using keyboard inputs, Acceleration : this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction: this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Scene Click Move follower to the closest spline vertex in your scene view or game view mouse click.","title":"Animation type"},{"location":"Unity3D/SplinePlus/Simple/#projected-path-following","text":"Projected path following is using raycasting on followers to sense its surroundings, the path following data is gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by followers, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow when \u201cProjected Path Following\" is set to On, you get the following settings which will allow you to perform advanced customization Variables Description Layer Mask Specifies layers to use for your projection rays Ray transform Used to define the transform that will hold the rays. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Follow Ground Normal The follower will use the ground mesh normals if set to true, if set to false, follower will use spline normals data instead.","title":"Projected Path Following"},{"location":"Unity3D/SplinePlus/SplineEdit/","text":"Spline editing actions are done through the items menu, right click in your scene view to open the items menu. Snap To Grid Snap all nodes and their handles to Unity grid (3D/2D) based on the view you are using. Pivot Editing Edit the pivot of your spline plus game object.","title":"Spline"},{"location":"Unity3D/SplinePlus/SplineEdit/#snap-to-grid","text":"Snap all nodes and their handles to Unity grid (3D/2D) based on the view you are using.","title":"Snap To Grid"},{"location":"Unity3D/SplinePlus/SplineEdit/#pivot-editing","text":"Edit the pivot of your spline plus game object.","title":"Pivot Editing"},{"location":"Unity3D/SplinePlus/ToolBar/","text":"Variables Description Import Import a \".SP\" file Export Export spline data in a \".SP\" file Append Append a \".SP\" file with the current spline data, this can be used as an \"Attach\" action which can help quickly build splines with repeated patterns Documentation Open documentation website","title":"ToolBar"},{"location":"Unity3D/SplinePlus/Trains/","text":"this is used to create followers with train animation behaviour. Variables Description On/Off switch Enable/Disable train follower animation. game object slots Train wagons game objects, \"Event\" button This opens the Train Events window, Selected Settings This shows two sections, settings for the train and settings for the wagon selected. Train Variables Description Branch key the current branch key the train wagons are on, To set a branch key for the train's wagons, select the branch from your scene view then click on Distance in case you want the wagons to be placed with equal distance from each other then use this instead of going through each wagon distance individually Speed The speed of the train. Animation type Variables Description Auto Animated move your train with a defined speed along the spline. Acceleration : this is the time in seconds it takes for the train to gain it\u2019s full speed or completely stop when game starts. Keyboard Input Move your train using keyboard inputs, Acceleration : this is the time in seconds it takes for the train to gain it\u2019s full speed or to completely stop when you move your train with your keyboard. Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on train speed\u201d. brakes force will impact the train speed as its value goes up, Flip direction: this will allow you to keep the train forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Wagon Variables Description Distance The current distance of the wagon on the branch, the max is the length of the branch. Position Translation of the wagon with a button to switch between World and local space. Rotation Rotation of the wagon, with a button to turn Rotation On/Off in case this was needed.","title":"Trains"},{"location":"Unity3D/SplinePlus/Trains/#selected-settings","text":"This shows two sections, settings for the train and settings for the wagon selected.","title":"Selected Settings"},{"location":"Unity3D/SplinePlus/Trains/#train","text":"Variables Description Branch key the current branch key the train wagons are on, To set a branch key for the train's wagons, select the branch from your scene view then click on Distance in case you want the wagons to be placed with equal distance from each other then use this instead of going through each wagon distance individually Speed The speed of the train.","title":"Train"},{"location":"Unity3D/SplinePlus/Trains/#animation-type","text":"Variables Description Auto Animated move your train with a defined speed along the spline. Acceleration : this is the time in seconds it takes for the train to gain it\u2019s full speed or completely stop when game starts. Keyboard Input Move your train using keyboard inputs, Acceleration : this is the time in seconds it takes for the train to gain it\u2019s full speed or to completely stop when you move your train with your keyboard. Brake force : this represents the brakes force, the minimum value for this is 1\u201dno impact on train speed\u201d. brakes force will impact the train speed as its value goes up, Flip direction: this will allow you to keep the train forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d.","title":"Animation type"},{"location":"Unity3D/SplinePlus/Trains/#wagon","text":"Variables Description Distance The current distance of the wagon on the branch, the max is the length of the branch. Position Translation of the wagon with a button to switch between World and local space. Rotation Rotation of the wagon, with a button to turn Rotation On/Off in case this was needed.","title":"Wagon"},{"location":"Unity3D/SplinePlus/API/Branch/","text":"img { display: block; margin-left: auto; margin-right: auto; } Add Branch Create a new branch at the node provided and return the branch key, public static int AddBranch ( SPData sPData , Node originNode ) Example: //get the node at branch key 2 and node index 3 var originNode = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //Add a new branch at originNode // originNode will be considered as the origin of the newly created branch int branchKey = SplinePlusAPI . AddBranch ( sPData , originNode ); //Access the newly created branch var branch = sPData . BranchesDict [ branchKey ] ; Add Node To Branch Begining Add a node at the beginning of a branch, You need to provide the branch key to determine the branch where you want to add your node Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored public static void Branch_Add_Node_Beginning ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = CreateNode ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add nodeToAdd to the beginning of branch of key 4 SplinePlusAPI . Branch_Add_Node_Beginning ( sPData , 4 , nodeToAdd ); End Add a node at the end of a branch, You need to provide the branch key to determine the branch where you want to add your node Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored public static void Branch_Add_Node_End ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = CreateNode ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add nodeToAdd to the end of branch of key 4 SplinePlusAPI . Branch_Add_Node_End ( sPData , 4 , nodeToAdd ); Delete Branch Delete a branch from the branches dictionnary by providing the branch key. public static void DeleteBranch ( SPData sPData , int branchKey ) Example: //Delete branch of key 4 SplinePlusAPI . DeleteBranch ( sPData , 4 ); Break Branch Break the branch to two branches at the node provided, if the node provided is shared then action will be ignored. public static void BreakBranch ( SPData sPData , Node node ) Example: // get the node of branch with key 2 and node index 3 var node = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //break branch at node //if node is shared node then break action will be ignored SplinePlusAPI . BreakBranch ( sPData , node ); Reverse Branch Reverse the branch direction. public static void ReverseBranch ( SPData sPData , int branchKey ) Example: //Reverse the branch with key 2 SplinePlusAPI . ReverseBranch ( sPData , 2 ); Branch Length Get the length of the branch provided. public static float Branch_Length ( SPData sPData , int branchKey ) //Or public static float Branch_Length ( SPData sPData , Branch branch ) Example: //The length of the branch with key 2 SplinePlusAPI . Branch_Length ( sPData , 2 ); //or Branch branch = sPData . BranchesDict [ 2 ] ; SplinePlusAPI . Branch_Length ( sPData , branch );","title":"Branch"},{"location":"Unity3D/SplinePlus/API/Branch/#add-branch","text":"Create a new branch at the node provided and return the branch key, public static int AddBranch ( SPData sPData , Node originNode ) Example: //get the node at branch key 2 and node index 3 var originNode = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //Add a new branch at originNode // originNode will be considered as the origin of the newly created branch int branchKey = SplinePlusAPI . AddBranch ( sPData , originNode ); //Access the newly created branch var branch = sPData . BranchesDict [ branchKey ] ;","title":"Add Branch "},{"location":"Unity3D/SplinePlus/API/Branch/#add-node-to-branch","text":"","title":"Add Node To Branch"},{"location":"Unity3D/SplinePlus/API/Branch/#begining","text":"Add a node at the beginning of a branch, You need to provide the branch key to determine the branch where you want to add your node Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored public static void Branch_Add_Node_Beginning ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = CreateNode ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add nodeToAdd to the beginning of branch of key 4 SplinePlusAPI . Branch_Add_Node_Beginning ( sPData , 4 , nodeToAdd );","title":"Begining"},{"location":"Unity3D/SplinePlus/API/Branch/#end","text":"Add a node at the end of a branch, You need to provide the branch key to determine the branch where you want to add your node Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be ignored public static void Branch_Add_Node_End ( SPData sPData , int branchKey , Node nodeToAdd ) Example: //Create a node to add to the branch Node nodeToAdd = CreateNode ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add nodeToAdd to the end of branch of key 4 SplinePlusAPI . Branch_Add_Node_End ( sPData , 4 , nodeToAdd );","title":"End"},{"location":"Unity3D/SplinePlus/API/Branch/#delete-branch","text":"Delete a branch from the branches dictionnary by providing the branch key. public static void DeleteBranch ( SPData sPData , int branchKey ) Example: //Delete branch of key 4 SplinePlusAPI . DeleteBranch ( sPData , 4 );","title":" Delete Branch "},{"location":"Unity3D/SplinePlus/API/Branch/#break-branch","text":"Break the branch to two branches at the node provided, if the node provided is shared then action will be ignored. public static void BreakBranch ( SPData sPData , Node node ) Example: // get the node of branch with key 2 and node index 3 var node = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //break branch at node //if node is shared node then break action will be ignored SplinePlusAPI . BreakBranch ( sPData , node );","title":" Break Branch "},{"location":"Unity3D/SplinePlus/API/Branch/#reverse-branch","text":"Reverse the branch direction. public static void ReverseBranch ( SPData sPData , int branchKey ) Example: //Reverse the branch with key 2 SplinePlusAPI . ReverseBranch ( sPData , 2 );","title":"  Reverse Branch "},{"location":"Unity3D/SplinePlus/API/Branch/#branch-length","text":"Get the length of the branch provided. public static float Branch_Length ( SPData sPData , int branchKey ) //Or public static float Branch_Length ( SPData sPData , Branch branch ) Example: //The length of the branch with key 2 SplinePlusAPI . Branch_Length ( sPData , 2 ); //or Branch branch = sPData . BranchesDict [ 2 ] ; SplinePlusAPI . Branch_Length ( sPData , branch );","title":"  Branch Length "},{"location":"Unity3D/SplinePlus/API/Branches/","text":"img { display: block; margin-left: auto; margin-right: auto; } Branches Branches in Spline Plus are stored in Dictionnaries, SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 Branch branch = sPData . DictBranches [ 3 ] ; }","title":"Branches"},{"location":"Unity3D/SplinePlus/API/Branches/#branches","text":"Branches in Spline Plus are stored in Dictionnaries, SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 Branch branch = sPData . DictBranches [ 3 ] ; }","title":"Branches"},{"location":"Unity3D/SplinePlus/API/Editor/","text":"img { display: block; margin-left: auto; margin-right: auto; } Elements that you can access in edit mode in case you want to add more customized features based on your project need . Follower Index Get the follower index selection in the followers list in your spline plus inspector public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentFollowerIndex = sPData . Selections . _FollowerIndex ; } Branch Key Get the selected branch key in your scene view public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentbranchKey = sPData . Selections . _BranchKey ; } Node Index Get the selected node index in your scene view public SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; Node currentNode = sPData . Selections . _NodeIndex ; }","title":"Editor"},{"location":"Unity3D/SplinePlus/API/Editor/#follower-index","text":"Get the follower index selection in the followers list in your spline plus inspector public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentFollowerIndex = sPData . Selections . _FollowerIndex ; }","title":"Follower Index"},{"location":"Unity3D/SplinePlus/API/Editor/#branch-key","text":"Get the selected branch key in your scene view public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentbranchKey = sPData . Selections . _BranchKey ; }","title":"Branch Key"},{"location":"Unity3D/SplinePlus/API/Editor/#node-index","text":"Get the selected node index in your scene view public SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; Node currentNode = sPData . Selections . _NodeIndex ; }","title":"Node Index"},{"location":"Unity3D/SplinePlus/API/Follower/","text":"img { display: block; margin-left: auto; margin-right: auto; } Game Object Change the follower gameObject. public static void Follower_GameObject ( Follower follower , GameObject followerGo ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //change follower gameObject SplinePlusAPI . Follower_GameObject ( follower , followerGo ); } Speed Change the follower speed. public static void Follower_Speed ( Follower follower , float speed ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Speed ( follower , 7 ); } Distance Change the follower distance on the branch. public static void Follower_Distance ( Follower follower , float progress ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower distance to 0 SplinePlusAPI . Follower_Distance ( follower , 0 ); } Active Enable/Disable follower animation. public static void Follower_Active ( Follower follower , bool value ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation by setting its active statut to false SplinePlusAPI . Follower_Active ( follower , false ); } Animation Type Change the follower animation type, followerAnimation is an enum, you have 3 options that you can chose from. Auto: Move follower on spline branches with a defined speed. Keyboad: Move follower using keyboard inputs (Arrow keys). Scene view: Move follower on the spline branches to the closest (scene view/game view) mouse click. public static void Follower_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_AnimationType ( follower , FollowerAnimation . Auto ); }","title":"Follower"},{"location":"Unity3D/SplinePlus/API/Follower/#game-object","text":"Change the follower gameObject. public static void Follower_GameObject ( Follower follower , GameObject followerGo ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //change follower gameObject SplinePlusAPI . Follower_GameObject ( follower , followerGo ); }","title":"Game Object"},{"location":"Unity3D/SplinePlus/API/Follower/#speed","text":"Change the follower speed. public static void Follower_Speed ( Follower follower , float speed ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Speed ( follower , 7 ); }","title":"Speed "},{"location":"Unity3D/SplinePlus/API/Follower/#distance","text":"Change the follower distance on the branch. public static void Follower_Distance ( Follower follower , float progress ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower distance to 0 SplinePlusAPI . Follower_Distance ( follower , 0 ); }","title":"Distance "},{"location":"Unity3D/SplinePlus/API/Follower/#active","text":"Enable/Disable follower animation. public static void Follower_Active ( Follower follower , bool value ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation by setting its active statut to false SplinePlusAPI . Follower_Active ( follower , false ); }","title":"Active "},{"location":"Unity3D/SplinePlus/API/Follower/#animation-type","text":"Change the follower animation type, followerAnimation is an enum, you have 3 options that you can chose from. Auto: Move follower on spline branches with a defined speed. Keyboad: Move follower using keyboard inputs (Arrow keys). Scene view: Move follower on the spline branches to the closest (scene view/game view) mouse click. public static void Follower_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_AnimationType ( follower , FollowerAnimation . Auto ); }","title":"Animation Type "},{"location":"Unity3D/SplinePlus/API/Followers/","text":"img { display: block; margin-left: auto; margin-right: auto; } There are 2 type of followers in Spline plus Simple Followers This is the most basic form of followers in Spline Plus you can have access the list of simple followers like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; } Follower Game Object FollowerGO is the game object that you want to use as follower see example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its follower gameObject to MyFollower simpleFollowers [ 0 ] . FollowerGO = MyFollower ; } Distance The current distance of the follower on the branch, the max is the length of the branch. see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its distance to 0 simpleFollowers [ 0 ] . Distance = 0 ; } Speed The speed of the follower. see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its speed to 7 simpleFollowers [ 0 ] . Speed = 7 ; } Branch key Current follower branch key see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its branch key to 7 simpleFollowers [ 0 ] . BranchKey = 7 ; } Active Enable/Disable follower animation. see example bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Stop follower animation simpleFollowers [ 0 ] . Active = false ; } Distance Data To get the current position, rotation, vertex index of the follower on the spline see example bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower distance data //follower position Vector3 position = simpleFollowers [ 0 ] . DistanceData . Position ; //follower rotation Quaternion rotation = simpleFollowers [ 0 ] . DistanceData . Rotation ; //Current vertex index of the follower on the branch vertices int vertexIndex = simpleFollowers [ 0 ] . DistanceData . Index ; } Train Followers Spline Plus has followers that behave like trains, you can have access to the list of train followers like bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of train followers List Train trains = sPData . Trains ; } Wagons To get access to wagons, which is basicaly a list of simple followers use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Train trains = sPData . Trains ; //Access first train Train train = trains [ 0 ] ; //Access first train wagons List Follower wagons = train . Wagons ; }","title":"Followers"},{"location":"Unity3D/SplinePlus/API/Followers/#simple-followers","text":"This is the most basic form of followers in Spline Plus you can have access the list of simple followers like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; }","title":"Simple Followers"},{"location":"Unity3D/SplinePlus/API/Followers/#follower-game-object","text":"FollowerGO is the game object that you want to use as follower see example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its follower gameObject to MyFollower simpleFollowers [ 0 ] . FollowerGO = MyFollower ; }","title":"Follower Game Object"},{"location":"Unity3D/SplinePlus/API/Followers/#distance","text":"The current distance of the follower on the branch, the max is the length of the branch. see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its distance to 0 simpleFollowers [ 0 ] . Distance = 0 ; }","title":"Distance"},{"location":"Unity3D/SplinePlus/API/Followers/#speed","text":"The speed of the follower. see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its speed to 7 simpleFollowers [ 0 ] . Speed = 7 ; }","title":"Speed"},{"location":"Unity3D/SplinePlus/API/Followers/#branch-key","text":"Current follower branch key see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its branch key to 7 simpleFollowers [ 0 ] . BranchKey = 7 ; }","title":"Branch key "},{"location":"Unity3D/SplinePlus/API/Followers/#active","text":"Enable/Disable follower animation. see example bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Stop follower animation simpleFollowers [ 0 ] . Active = false ; }","title":"Active"},{"location":"Unity3D/SplinePlus/API/Followers/#distance-data","text":"To get the current position, rotation, vertex index of the follower on the spline see example bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower distance data //follower position Vector3 position = simpleFollowers [ 0 ] . DistanceData . Position ; //follower rotation Quaternion rotation = simpleFollowers [ 0 ] . DistanceData . Rotation ; //Current vertex index of the follower on the branch vertices int vertexIndex = simpleFollowers [ 0 ] . DistanceData . Index ; }","title":"Distance Data"},{"location":"Unity3D/SplinePlus/API/Followers/#train-followers","text":"Spline Plus has followers that behave like trains, you can have access to the list of train followers like bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of train followers List Train trains = sPData . Trains ; }","title":"Train Followers"},{"location":"Unity3D/SplinePlus/API/Followers/#wagons","text":"To get access to wagons, which is basicaly a list of simple followers use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Train trains = sPData . Trains ; //Access first train Train train = trains [ 0 ] ; //Access first train wagons List Follower wagons = train . Wagons ; }","title":"Wagons"},{"location":"Unity3D/SplinePlus/API/Node/","text":"img { display: block; margin-left: auto; margin-right: auto; } Create Node Local Space This creates a node object in a Vector3 local space. public static Node Node_Create_Local ( SPData sPData , Vector3 nodeLocalPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(1,1,1) local space var node = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 1 , 1 , 1 )); World Space This creates a node object in a Vector3 world space. public static Node Node_Create_World ( SPData sPData , Vector3 nodeWorldPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(10,20,1) world space var node = SplinePlusAPI . Node_Create_World ( sPData , new Vector3 ( 10 , 20 , 1 )); Create Node At Distance This creates a node on a defined branch at defined distance and return the node created. public static Node CreateNode_At_Distance ( SPData sPData , int branchKey , float Distance ) Example: //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 40 , 0 , 0 )); //create 3 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 )); var node3 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 20 , 0 , 10 )); //Connect those nodes with each other var branchKey = SplinePlusAPI . ConnectTwoNodes ( sPData , node1 , node2 ); SplinePlusAPI . AddNodeToBranch ( sPData , branchKey , node3 , false ); var branchDistance = SplinePlusAPI . Branch_Length ( sPData , branchKey ); //create a node on the branch defined at a distance of half of branchDistance SplinePlusAPI . CreateNode_At_Distance ( sPData , branchKey , branchDistance * 0.5f ); Node Position Local Space Set the node local position, with the possibility of setting node handles position as well public static void Node_SetPosition_World ( Node node , Vector3 nodeLocalPos , Vector3 point1LocalPos = new Vector3 (), Vector3 point2LocalPos = new Vector3 ()) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newLocalPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_SetPosition_World ( node , true , newLocalPosition ); World Space Set the node world position, with the possibility of setting node handles position as well public static void Node_SetPosition_World ( Node node , Vector3 nodeWorldPos , Vector3 point1LocalPos = new Vector3 (), Vector3 point2LocalPos = new Vector3 ()) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newWorldPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_SetPosition_World ( node , true , newWorldPosition ); Remove Node Delete a (shared/simple) node object. public static void Node_Remove ( SPData sPData , Node nodeToDelete ) Example: //delete the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; Node_Remove ( sPData , node ); Node Type Change the node type, newNodeType is an enum, options available are smooth, free, broken public static void Node_Type ( SPData sPData , Node node , NodeType newNodeType ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Type ( SPData , node , NodeType . Smooth ); Shared Node Type Change the shared node type, \"sharedNodeType\" is an enum, options available are Random: pick a branch randomly when follower is on the shared node Defined: define a branch for the follower to take when it is on the shared node , ( Optional ) the left, right, forward, backward are branches keys to define , if no value is defined for these variables, then branch picking decision will become random. public static void Node_Shared_Type ( Node node , SharedNodeType sharedNodeType = SharedNodeType . Random , int left = - 1 , int right = - 1 , int forward = - 1 , int backward = - 1 ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Type ( SPData , node , NodeType . Smooth ); Node Speed Change the node speed value, public static void Node_Speed ( SPData sPData , Node node , float speed ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node speed to 100 SplinePlusAPI . Node_Speed ( SPData , node , 100 ); Node Normal Change the node normal factor value, This is a degree \u00b0 value that varies from -180 to 180 public static void Node_Normal ( SPData sPData , Node node , float NormalFactor ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node normal to 90 SplinePlusAPI . Node_Normal ( SPData , node , 90 ); Duplicate Node Duplicate a node object and returns the duplicate, public static Node Node_Duplicate ( SPData sPData , Node originNode ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Duplicate the node and catch the duplicate in a variable Node duplicateNode = SplinePlusAPI . Node_Duplicate ( SPData , node ); Connect 2 Nodes Create a branch by linking the two nodes provided and returns the branch key. public static int ConnectTwoNodes ( SPData SPData , Node node1 , Node node2 ) Example: //Creates node1 and node2 Node node1 = CreateNode ( SPData , Vector3 . zero ); Node node2 = CreateNode ( SPData , Vector3 . zero ); //create a branch that will hold node1 and node 2 and catch the branch key Int branchKey = SplinePlusAPI . ConnectTwoNodes ( SPData , node1 , node2 ); Shared Nodes This returns a list of all the shared nodes of the SPData object provided, public static List Node SharedNodes ( SPData sPData ) Example: java List Node sharedNode= SharedNodes(sPData); Chamfer Shared Node Chamfer the shared node provided The radius value varies from [0,1]. public static void SharedNode_Chamfer ( SPData sPData , Node node , float radius ) Example: //get all the shared nodes of a sPData object var sharedNodes = SplinePlusAPI . SharedNodes ( sPData ); var node = sharedNodes [ 0 ] ; //Smooth the first shared node in the shared nodes list SplinePlusAPI . SharedNode_Chamfer ( sPData , node , 0.2f ); Shared Nodes This smooths all the shared nodes in the SPData object provided The radius value varies from [0,1]. public static void SharedNodes_Chamfer ( SPData sPData , float radius ) Example: //Smooth all the shared nodes of the sPData object SplinePlusAPI . SharedNodes_Chamfer ( sPData , 0.2f ); Flip Handles Flip the node handles, This can be used to tweak the curvature of the node provided, Instead of providing the node, you need to provide two variants, the branch key and the node index in the nodes list of the branch. public static void FlipHandles ( SPData sPData , int BranchKey , int NodeIndex ) Example: //Flip the handles of the second node of the branch with key 0 SplinePlusAPI . FlipHandles ( sPData , 0 , 2 )","title":"Node"},{"location":"Unity3D/SplinePlus/API/Node/#create-node","text":"","title":"Create Node"},{"location":"Unity3D/SplinePlus/API/Node/#local-space","text":"This creates a node object in a Vector3 local space. public static Node Node_Create_Local ( SPData sPData , Vector3 nodeLocalPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(1,1,1) local space var node = SplinePlusAPI . Node_Create_Local ( sPData , new Vector3 ( 1 , 1 , 1 ));","title":"Local Space"},{"location":"Unity3D/SplinePlus/API/Node/#world-space","text":"This creates a node object in a Vector3 world space. public static Node Node_Create_World ( SPData sPData , Vector3 nodeWorldPos ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(10,20,1) world space var node = SplinePlusAPI . Node_Create_World ( sPData , new Vector3 ( 10 , 20 , 1 ));","title":"World Space"},{"location":"Unity3D/SplinePlus/API/Node/#create-node-at-distance","text":"This creates a node on a defined branch at defined distance and return the node created. public static Node CreateNode_At_Distance ( SPData sPData , int branchKey , float Distance ) Example: //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 40 , 0 , 0 )); //create 3 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 )); var node3 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 20 , 0 , 10 )); //Connect those nodes with each other var branchKey = SplinePlusAPI . ConnectTwoNodes ( sPData , node1 , node2 ); SplinePlusAPI . AddNodeToBranch ( sPData , branchKey , node3 , false ); var branchDistance = SplinePlusAPI . Branch_Length ( sPData , branchKey ); //create a node on the branch defined at a distance of half of branchDistance SplinePlusAPI . CreateNode_At_Distance ( sPData , branchKey , branchDistance * 0.5f );","title":"Create Node At Distance"},{"location":"Unity3D/SplinePlus/API/Node/#node-position","text":"","title":"Node Position"},{"location":"Unity3D/SplinePlus/API/Node/#local-space_1","text":"Set the node local position, with the possibility of setting node handles position as well public static void Node_SetPosition_World ( Node node , Vector3 nodeLocalPos , Vector3 point1LocalPos = new Vector3 (), Vector3 point2LocalPos = new Vector3 ()) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newLocalPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_SetPosition_World ( node , true , newLocalPosition );","title":"Local Space"},{"location":"Unity3D/SplinePlus/API/Node/#world-space_1","text":"Set the node world position, with the possibility of setting node handles position as well public static void Node_SetPosition_World ( Node node , Vector3 nodeWorldPos , Vector3 point1LocalPos = new Vector3 (), Vector3 point2LocalPos = new Vector3 ()) Example: //change node local position to newLocalPosition Node node = sPData . BranchesDict [ 1 ] . Nodes [ 3 ] ; Vector3 newWorldPosition = new Vector3 ( 10 , 10 , 0 ); SplinePlusAPI . Node_SetPosition_World ( node , true , newWorldPosition );","title":"World  Space"},{"location":"Unity3D/SplinePlus/API/Node/#remove-node","text":"Delete a (shared/simple) node object. public static void Node_Remove ( SPData sPData , Node nodeToDelete ) Example: //delete the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; Node_Remove ( sPData , node );","title":"Remove Node"},{"location":"Unity3D/SplinePlus/API/Node/#node-type","text":"Change the node type, newNodeType is an enum, options available are smooth, free, broken public static void Node_Type ( SPData sPData , Node node , NodeType newNodeType ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Type ( SPData , node , NodeType . Smooth );","title":" Node Type "},{"location":"Unity3D/SplinePlus/API/Node/#shared-node-type","text":"Change the shared node type, \"sharedNodeType\" is an enum, options available are Random: pick a branch randomly when follower is on the shared node Defined: define a branch for the follower to take when it is on the shared node , ( Optional ) the left, right, forward, backward are branches keys to define , if no value is defined for these variables, then branch picking decision will become random. public static void Node_Shared_Type ( Node node , SharedNodeType sharedNodeType = SharedNodeType . Random , int left = - 1 , int right = - 1 , int forward = - 1 , int backward = - 1 ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Type ( SPData , node , NodeType . Smooth );","title":" Shared Node Type "},{"location":"Unity3D/SplinePlus/API/Node/#node-speed","text":"Change the node speed value, public static void Node_Speed ( SPData sPData , Node node , float speed ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node speed to 100 SplinePlusAPI . Node_Speed ( SPData , node , 100 );","title":" Node Speed "},{"location":"Unity3D/SplinePlus/API/Node/#node-normal","text":"Change the node normal factor value, This is a degree \u00b0 value that varies from -180 to 180 public static void Node_Normal ( SPData sPData , Node node , float NormalFactor ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node normal to 90 SplinePlusAPI . Node_Normal ( SPData , node , 90 );","title":"  Node Normal "},{"location":"Unity3D/SplinePlus/API/Node/#duplicate-node","text":"Duplicate a node object and returns the duplicate, public static Node Node_Duplicate ( SPData sPData , Node originNode ) Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Duplicate the node and catch the duplicate in a variable Node duplicateNode = SplinePlusAPI . Node_Duplicate ( SPData , node );","title":"  Duplicate Node "},{"location":"Unity3D/SplinePlus/API/Node/#connect-2-nodes","text":"Create a branch by linking the two nodes provided and returns the branch key. public static int ConnectTwoNodes ( SPData SPData , Node node1 , Node node2 ) Example: //Creates node1 and node2 Node node1 = CreateNode ( SPData , Vector3 . zero ); Node node2 = CreateNode ( SPData , Vector3 . zero ); //create a branch that will hold node1 and node 2 and catch the branch key Int branchKey = SplinePlusAPI . ConnectTwoNodes ( SPData , node1 , node2 );","title":" Connect  2 Nodes "},{"location":"Unity3D/SplinePlus/API/Node/#shared-nodes","text":"This returns a list of all the shared nodes of the SPData object provided, public static List Node SharedNodes ( SPData sPData ) Example: java List Node sharedNode= SharedNodes(sPData);","title":" Shared Nodes "},{"location":"Unity3D/SplinePlus/API/Node/#chamfer","text":"","title":" Chamfer"},{"location":"Unity3D/SplinePlus/API/Node/#shared-node","text":"Chamfer the shared node provided The radius value varies from [0,1]. public static void SharedNode_Chamfer ( SPData sPData , Node node , float radius ) Example: //get all the shared nodes of a sPData object var sharedNodes = SplinePlusAPI . SharedNodes ( sPData ); var node = sharedNodes [ 0 ] ; //Smooth the first shared node in the shared nodes list SplinePlusAPI . SharedNode_Chamfer ( sPData , node , 0.2f );","title":"Shared Node"},{"location":"Unity3D/SplinePlus/API/Node/#shared-nodes_1","text":"This smooths all the shared nodes in the SPData object provided The radius value varies from [0,1]. public static void SharedNodes_Chamfer ( SPData sPData , float radius ) Example: //Smooth all the shared nodes of the sPData object SplinePlusAPI . SharedNodes_Chamfer ( sPData , 0.2f );","title":"Shared Nodes"},{"location":"Unity3D/SplinePlus/API/Node/#flip-handles","text":"Flip the node handles, This can be used to tweak the curvature of the node provided, Instead of providing the node, you need to provide two variants, the branch key and the node index in the nodes list of the branch. public static void FlipHandles ( SPData sPData , int BranchKey , int NodeIndex ) Example: //Flip the handles of the second node of the branch with key 0 SplinePlusAPI . FlipHandles ( sPData , 0 , 2 )","title":"Flip Handles"},{"location":"Unity3D/SplinePlus/API/Nodes/","text":"img { display: block; margin-left: auto; margin-right: auto; } A branch is a group of nodes, so each branch object has a list of nodes To acces the nodes list of a branch SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; } Node Points Transfoms that control the node position(Point) and node handles (Point1 and point2) \"Point1\" and \"Point2\" are transforms children of the main transform \"Point\" See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // change node position node . Point . Position = new Vector3 ( 10 , 2 , 8 ); // change node handles position node . Point1 . localPosition = new Vector3 ( 3 , 0 , 2 ); node . Point2 . localPosition = - node . Point1 . localPosition ; } Node Is Shared You can check this node is shared or not by simply checking the value of IsShared See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; if ( node . IsShared ) Debug . Log ( Node is shared ); else Debug . Log ( Node not shared ); } Node Connected Branches get the list of branch key connected to the node, if node is not shared you will get just one branch key. See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; var nodeBranchKey = node . SharedNodeData . ConnectedBranches ; for ( int i = 0 ; i nodeBranchKey . Count ; i ++ ) { Debug . Log ( node is on branch with key + nodeBranchKey [ i ] ); } } Node Speed The node speed value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; int nodeSpeed = node . SharedNodeData . Speed ; // node normals factor varies form -180 to 180 int nodeNormal = node . SharedNodeData . NormalFactor ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); } Node Normal The node normal value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // node normals factor varies form -180 to 180 node . SharedNodeData . NormalFactor = 90.0f ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); } First/Last Node You can get the first or last node of your branch without having to access the nodes list. see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get first and last node of a branch Node firstNode = sPData . DictBranches [ 3 ] . FirstNode ; Node lastNode = sPData . DictBranches [ 3 ] . LastNode ; } Vertices, Normals, Tangents To access the branch Vertices, Normals, Tangents that defines the branch bezier, see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Vertices, Normals, Tangents of branch with key 3 List Vector3 vertices = sPData . DictBranches [ 3 ] . Vertices ; List Vector3 normals = sPData . DictBranches [ 3 ] . Normals ; List Vector3 tangents = sPData . DictBranches [ 3 ] . Tangents ; } Branch Length Get the branch length (Distance). See example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get branch length float branchLength = sPData . DictBranches [ 3 ] . Length ; }","title":"Nodes"},{"location":"Unity3D/SplinePlus/API/Nodes/#node-points","text":"Transfoms that control the node position(Point) and node handles (Point1 and point2) \"Point1\" and \"Point2\" are transforms children of the main transform \"Point\" See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // change node position node . Point . Position = new Vector3 ( 10 , 2 , 8 ); // change node handles position node . Point1 . localPosition = new Vector3 ( 3 , 0 , 2 ); node . Point2 . localPosition = - node . Point1 . localPosition ; }","title":"Node Points"},{"location":"Unity3D/SplinePlus/API/Nodes/#node-is-shared","text":"You can check this node is shared or not by simply checking the value of IsShared See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; if ( node . IsShared ) Debug . Log ( Node is shared ); else Debug . Log ( Node not shared ); }","title":"Node Is Shared"},{"location":"Unity3D/SplinePlus/API/Nodes/#node-connected-branches","text":"get the list of branch key connected to the node, if node is not shared you will get just one branch key. See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; var nodeBranchKey = node . SharedNodeData . ConnectedBranches ; for ( int i = 0 ; i nodeBranchKey . Count ; i ++ ) { Debug . Log ( node is on branch with key + nodeBranchKey [ i ] ); } }","title":"Node Connected Branches"},{"location":"Unity3D/SplinePlus/API/Nodes/#node-speed","text":"The node speed value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; int nodeSpeed = node . SharedNodeData . Speed ; // node normals factor varies form -180 to 180 int nodeNormal = node . SharedNodeData . NormalFactor ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); }","title":"Node Speed"},{"location":"Unity3D/SplinePlus/API/Nodes/#node-normal","text":"The node normal value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // node normals factor varies form -180 to 180 node . SharedNodeData . NormalFactor = 90.0f ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); }","title":"Node Normal"},{"location":"Unity3D/SplinePlus/API/Nodes/#firstlast-node","text":"You can get the first or last node of your branch without having to access the nodes list. see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get first and last node of a branch Node firstNode = sPData . DictBranches [ 3 ] . FirstNode ; Node lastNode = sPData . DictBranches [ 3 ] . LastNode ; }","title":"First/Last Node"},{"location":"Unity3D/SplinePlus/API/Nodes/#vertices-normals-tangents","text":"To access the branch Vertices, Normals, Tangents that defines the branch bezier, see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Vertices, Normals, Tangents of branch with key 3 List Vector3 vertices = sPData . DictBranches [ 3 ] . Vertices ; List Vector3 normals = sPData . DictBranches [ 3 ] . Normals ; List Vector3 tangents = sPData . DictBranches [ 3 ] . Tangents ; }","title":"Vertices, Normals, Tangents"},{"location":"Unity3D/SplinePlus/API/Nodes/#branch-length","text":"Get the branch length (Distance). See example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get branch length float branchLength = sPData . DictBranches [ 3 ] . Length ; }","title":"Branch Length"},{"location":"Unity3D/SplinePlus/API/Spline/","text":"img { display: block; margin-left: auto; margin-right: auto; } Create Spline plus This creates a Spline Plus game object at a Vector3 position , this function returns the SPData object created, public static SPData CreateSplinePlus ( Vector3 position ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); Close spline Close the spline, this will create another branch that will connect the already existing branch forks. For this to work, the SPData object should contain already one branch created with a minimum of 2 nodes public static void CloseSpline ( SPData sPData ) Example: //create the game object that will hold the spline plus component and catch the SPData to use further var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( - 10 , 0 , 0 )); //create the 2 nodes var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( - 10 , 0 , 0 )); //connect the 2 node SplinePlusAPI . ConnectTwoNodes ( sPData , node1 , node2 ); //change the node points to get the oval shape, // just copy the values from the editor example it s easier this way node1 . Point1 . localPosition = new Vector3 ( 0 , 0 , 20 ); node1 . Point2 . localPosition = - node1 . Point1 . localPosition ; node2 . Point1 . localPosition = new Vector3 ( 0 , 0 , 20 ); node2 . Point2 . localPosition = - node1 . Point1 . localPosition ; //set looped to true to close the shape SplinePlusAPI . CloseSpline ( sPData ); //trigger a spline plus update sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData );","title":"Spline"},{"location":"Unity3D/SplinePlus/API/Spline/#create-spline-plus","text":"This creates a Spline Plus game object at a Vector3 position , this function returns the SPData object created, public static SPData CreateSplinePlus ( Vector3 position ) Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 ));","title":"Create Spline plus "},{"location":"Unity3D/SplinePlus/API/Spline/#close-spline","text":"Close the spline, this will create another branch that will connect the already existing branch forks. For this to work, the SPData object should contain already one branch created with a minimum of 2 nodes public static void CloseSpline ( SPData sPData ) Example: //create the game object that will hold the spline plus component and catch the SPData to use further var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( - 10 , 0 , 0 )); //create the 2 nodes var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( - 10 , 0 , 0 )); //connect the 2 node SplinePlusAPI . ConnectTwoNodes ( sPData , node1 , node2 ); //change the node points to get the oval shape, // just copy the values from the editor example it s easier this way node1 . Point1 . localPosition = new Vector3 ( 0 , 0 , 20 ); node1 . Point2 . localPosition = - node1 . Point1 . localPosition ; node2 . Point1 . localPosition = new Vector3 ( 0 , 0 , 20 ); node2 . Point2 . localPosition = - node1 . Point1 . localPosition ; //set looped to true to close the shape SplinePlusAPI . CloseSpline ( sPData ); //trigger a spline plus update sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData );","title":"Close spline"},{"location":"Unity3D/SplinePlus/API/SplinePlus/","text":"img { display: block; margin-left: auto; margin-right: auto; } SPData SPData is a data class for the monobehaviour Spline Plus, You can get the SPData if you already have your spline plus game object in your scene view like this SPData sPData ; public void Start (){ sPData = GetComponent SplinePlus (). SPData ; } When using the Spline plus API , this is how you can get the SPData SPData sPData ; public void Start (){ sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); }","title":"Spline Plus"},{"location":"Unity3D/SplinePlus/API/SplinePlus/#spdata","text":"SPData is a data class for the monobehaviour Spline Plus, You can get the SPData if you already have your spline plus game object in your scene view like this SPData sPData ; public void Start (){ sPData = GetComponent SplinePlus (). SPData ; } When using the Spline plus API , this is how you can get the SPData SPData sPData ; public void Start (){ sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); }","title":"SPData"},{"location":"UnrealEngine/SplinePlus/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Under developement","title":"Spline Plus"},{"location":"UnrealEngine/SplinePlus/Introduction/#under-developement","text":"","title":"Under developement"}]}