{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unity3D Spline Plus Spline Mesh Deform Spline Path Finding Unreal Engine Spline Plus","title":"Home"},{"location":"#unity3d","text":"Spline Plus Spline Mesh Deform Spline Path Finding","title":"Unity3D"},{"location":"#unreal-engine","text":"Spline Plus","title":"Unreal Engine"},{"location":"Unity3D/SplineMeshDeform/Extrude/","text":"img { display: block; margin-left: auto; margin-right: auto; } This Extrudes the spline plus shape and transforms it into a mesh with auto generated correct Uvs, tangents and normals. Variables Description Material This is where you can set the material of your extruded mesh , It is recommended to use this to change material instead of using the mesh renderer material slot. Extrude height Change the extrusion height on the Y axis , currently the axis of extrusion supported is Y only, you can rotate your spline plus object to get extrusion on other axis in case it\u2019s needed, Rings The number of ring edges you have in your extrusion shape Cap holes fill both extrusion mesh holes, Two sided Used in case you want your mesh to be visible from both sides, in case two sided is not required then it\u2019s better to keep it off for optimization purpose, Flip faces This is used to flip the visible side of your mesh Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\" Tip In case you want to extrude a closed spline shape then the best way to do that is to use a looped shape To get that you need to go to the settings in Spline Plus inspector and set looped value to ON Tip If your generated extrusion mesh has its faces facing the wrong direction, then It\u2019s recommended to reverse the extruded branch instead of flipping the faces from the extrude settings inspector, You might get issues with capping if flip faces option was used instead,","title":"Extrude"},{"location":"Unity3D/SplineMeshDeform/Introduction/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } Introduction Spline mesh deform is a procedural mesh generation modifiers collection for Spline plus . Once you have Spline Mesh Deform in your project you should see a sub menu tab that appears at the end of Spline Plus Inspector, like the image bellow. Modifiers included : Mesh deform: A procedural mesh generation tool on all Spline plus branches for custom meshes Feartures : Modes: Alignment / Deformation Multiple meshes combination Procedural mesh generation on multiple branches Materials sharing between meshes Translation, rotation, scale with randomization possibility Mirroring Mesh trimming GPU processing CPU Multi threading processing Highly optimized source code Extrude shape: Extrude Spline plus branches and transform them into procedural mesh Tube mesh: convert Spline plus branches into customizable tube meshes, Plane mesh: convert Spline plus branches into customizable plane meshes, similar to Unity Line renderer","title":"Introduction"},{"location":"Unity3D/SplineMeshDeform/Introduction/#introduction","text":"Spline mesh deform is a procedural mesh generation modifiers collection for Spline plus . Once you have Spline Mesh Deform in your project you should see a sub menu tab that appears at the end of Spline Plus Inspector, like the image bellow. Modifiers included :","title":"Introduction"},{"location":"Unity3D/SplineMeshDeform/Introduction/#mesh-deform","text":"A procedural mesh generation tool on all Spline plus branches for custom meshes","title":"Mesh deform:"},{"location":"Unity3D/SplineMeshDeform/Introduction/#feartures","text":"Modes: Alignment / Deformation Multiple meshes combination Procedural mesh generation on multiple branches Materials sharing between meshes Translation, rotation, scale with randomization possibility Mirroring Mesh trimming GPU processing CPU Multi threading processing Highly optimized source code","title":"Feartures :"},{"location":"Unity3D/SplineMeshDeform/Introduction/#extrude-shape","text":"Extrude Spline plus branches and transform them into procedural mesh","title":"Extrude shape:"},{"location":"Unity3D/SplineMeshDeform/Introduction/#tube-mesh","text":"convert Spline plus branches into customizable tube meshes,","title":"Tube mesh:"},{"location":"Unity3D/SplineMeshDeform/Introduction/#plane-mesh","text":"convert Spline plus branches into customizable plane meshes, similar to Unity Line renderer","title":"Plane mesh:"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/","text":"img { display: block; margin-left: auto; margin-right: auto; } A procedural mesh generation tool for custom meshes on all Spline plus branches. Settings Branch Variables Description Prefab meshes area This contains the list of prefab meshes which user drag from the project window, the area is used to organize the meshes combination process, each prefab mesh \u201cMesh\u201d has its own settings listed below, For each branch there is new prefab meshes list,so once you change branches selection you will see that the prefab meshes list changes as well, Ps :Meshes need to be dragged from the project window and dropped into the prefab meshes area. Select prefab mesh: each prefab mesh is represented in the prefab meshes area with a selectable prefab texture button, Click on the prefab mesh texture button to select the desirable prefab mesh. Prefab Mesh Variables Description Delete the selected prefab mesh Hide/unhide the selected prefab mesh. Duplicate the selected prefab mesh. Prefab mesh name It usually receives the prefab name but it can be edited to whatever value you want, just click on the text area and start typing for editing. Materials Material section for the selectable prefab mesh. Spline mesh deform supports multiple materials. You can add the selected prefab mesh material to the materials list by setting unique to true, This will add the selected prefab mesh material to the materials list so it can be reused by other prefab meshes. The list contains all the unique materials that will be found in the final mesh. This will optimize performance by not having duplicate materials in your final mesh. Type Currently there are two types supported , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Mesh trim Used to define the extensions of a deformed mesh when exceeding the branch distance limit, this appears only if you are using deformation, available options: None, Left, Right, Both Mirror axis Used to create a mirror effect on a defined axis, you can use rotation and translation to create a mirroring offse Offset Translate the procedural calculated meshes. Rotation Rotate the procedural calculated meshes. Lock : Used to lock the rotation, the meshes will follow the spline rotation data on the Z axis only ps:This can be used in Alignment mode only, Lock Off Lock On Scale Scale the procedural calculated meshes Unif set it to On in case you want to scale the procedural calculated meshes on all 3 axes all at once, set it to Off in case you want to scale on separate axis, Rand Used to create a random Offset, Rotation or Scale behaviour Once Rand is set to On then new Offset , Rotation or Scale fields appear , the randomization will be done between the two fields values. Seed Used to change the randomization seed Tiling Used to define how many times you want the mesh to be repeated along the spline. Auto tiling This calculates automatically how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Used to control the space between the meshes of the prefab mesh. Linked/ Unlinked This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction. Shared Shared settings between branches and prefab meshes. Variables Description Deformation processing The processing method used for the deformed mesh calculation , There are 3 options available, GPU , CPU Multi threaded, CPU Single threaded Export Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Mesh Deform"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/#settings","text":"","title":"Settings"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/#branch","text":"Variables Description Prefab meshes area This contains the list of prefab meshes which user drag from the project window, the area is used to organize the meshes combination process, each prefab mesh \u201cMesh\u201d has its own settings listed below, For each branch there is new prefab meshes list,so once you change branches selection you will see that the prefab meshes list changes as well, Ps :Meshes need to be dragged from the project window and dropped into the prefab meshes area. Select prefab mesh: each prefab mesh is represented in the prefab meshes area with a selectable prefab texture button, Click on the prefab mesh texture button to select the desirable prefab mesh.","title":"Branch"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/#prefab-mesh","text":"Variables Description Delete the selected prefab mesh Hide/unhide the selected prefab mesh. Duplicate the selected prefab mesh. Prefab mesh name It usually receives the prefab name but it can be edited to whatever value you want, just click on the text area and start typing for editing. Materials Material section for the selectable prefab mesh. Spline mesh deform supports multiple materials. You can add the selected prefab mesh material to the materials list by setting unique to true, This will add the selected prefab mesh material to the materials list so it can be reused by other prefab meshes. The list contains all the unique materials that will be found in the final mesh. This will optimize performance by not having duplicate materials in your final mesh. Type Currently there are two types supported , Alignment: this aligns the meshes along the spline branches without performing a deformation, Deformation: this alings the meshes along the spline branches and perform deformation as well, Mesh trim Used to define the extensions of a deformed mesh when exceeding the branch distance limit, this appears only if you are using deformation, available options: None, Left, Right, Both Mirror axis Used to create a mirror effect on a defined axis, you can use rotation and translation to create a mirroring offse Offset Translate the procedural calculated meshes. Rotation Rotate the procedural calculated meshes. Lock : Used to lock the rotation, the meshes will follow the spline rotation data on the Z axis only ps:This can be used in Alignment mode only, Lock Off Lock On Scale Scale the procedural calculated meshes Unif set it to On in case you want to scale the procedural calculated meshes on all 3 axes all at once, set it to Off in case you want to scale on separate axis, Rand Used to create a random Offset, Rotation or Scale behaviour Once Rand is set to On then new Offset , Rotation or Scale fields appear , the randomization will be done between the two fields values. Seed Used to change the randomization seed Tiling Used to define how many times you want the mesh to be repeated along the spline. Auto tiling This calculates automatically how many meshes from the selected prefab mesh fits into the spline branch while taking into consideration the spacing value. Spacing Used to control the space between the meshes of the prefab mesh. Linked/ Unlinked This links the spacing of all the other prefab meshes to the currently selected prefab mesh, This helps you move prefab meshes all at once instead of going through them one by one Placement Used to offset the meshes on the spline branch direction.","title":"Prefab Mesh"},{"location":"Unity3D/SplineMeshDeform/MeshDeform/#shared","text":"Shared settings between branches and prefab meshes. Variables Description Deformation processing The processing method used for the deformed mesh calculation , There are 3 options available, GPU , CPU Multi threaded, CPU Single threaded Export Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Shared"},{"location":"Unity3D/SplineMeshDeform/PlaneMesh/","text":"img { display: block; margin-left: auto; margin-right: auto; } Plane mesh is a simple and straightforward sub tool of Spline mesh deform, used to transform the spline plus branches into a plane mesh,this is very similar to the Unity line renderer except this one is controlled by spline nodes and it\u2019s generated for all spline plus branches Variables Description Material The Plane mesh material Width Used to change the width of the plane mesh generated Flip faces Used to flip the visible side of your Plane meshes Two sided Used in case you want your Plane meshes to be visible from both sides, it\u2019s recommended to turn this off Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Plane Mesh"},{"location":"Unity3D/SplineMeshDeform/TubeMesh/","text":"img { display: block; margin-left: auto; margin-right: auto; } Tube mesh transforms spline plus branches into fully customizable 3D mesh tubes, this can be used to easily generate pipes and wires in Unity, Variables Description Material The tube mesh material Radius This is the tube radius Segments This is the number of segments the tubes will have, Flip faces Flip the tubes mesh faces Two sides The tube mesh will be visible from inside as from outside if it\u2019s set to true. Export asset Export mesh to an asset file , the file can be found in \"Assets/SMDExport\"","title":"Tube Mesh"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } This window is opened when follower settings button is pressed , it contains additional follower settings such as animation type and follower events Variables Description Follower animation type \u201cAuto animated\u201d move your follower with a defined speed along the spline. \u201cKeyboard input\u201d move your follower using keyboard inputs, \u201cScene click\u201d move your follower to the closest spline vertex to your scene view mouse click. Extra Settings Auto Animated Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Path Following Type \u201cStrict\u201d path following is the old fashion way for followers to follow paths , it means that the follower will follow exactly the raw spline data provided, \u201cProjected\u201d path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow. Keyboard Input Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Brake force this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Path Following Type \u201cStrict\u201d path following is the old fashion way for followers to follow paths , it means that the follower will follow exactly the raw spline data provided, \u201cProjected\u201d path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow. Scene Click Variables Description Path Following Type \u201cStrict\u201d path following is the old fashion way for followers to follow paths , it means that the follower will follow exactly the raw spline data provided, \u201cProjected\u201d path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow. Projected Path Following Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow when \u201cProjected\u201d is selected, you get the following settings which will allow you to perform advanced customization Variables Description Ray transform Used to define the position and direction of your obstacles sensor ray. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Follow Ground Normal the follower will lineup its Upward direction with the ground normal direction if set to true, if set to false then the follower upward direction will be the spline raw normal data, Animation Events Variables Description OnAwakeDelayTime Used to delay the triggering of the \u201cOnAwake\u201d event when the game starts OnAwake triggered when the game starts OnMove triggered when the follower moves . IDLE triggered when the follower stops. Space triggered when Space key is pressed. Events An advanced events system that fully covers all the possibilities, To setup your events you need to provide two variants , previous branch key and next branch key , then the data provided is stored in an Event conditions array , once one of the conditions in the array is met then the corresponding event will trigger . Variables Description Event Title Editable text field to customize your event name Previous Branch Previous branch key Next Branch Next branch key Conditions List Conditions string array My Events Events that should be trigerred when one of the conditions in the conditions array is met","title":"Follower Settings"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/#extra-settings","text":"","title":"Extra Settings"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/#auto-animated","text":"Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Path Following Type \u201cStrict\u201d path following is the old fashion way for followers to follow paths , it means that the follower will follow exactly the raw spline data provided, \u201cProjected\u201d path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow.","title":"Auto Animated"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/#keyboard-input","text":"Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Brake force this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Path Following Type \u201cStrict\u201d path following is the old fashion way for followers to follow paths , it means that the follower will follow exactly the raw spline data provided, \u201cProjected\u201d path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow.","title":"Keyboard Input"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/#scene-click","text":"Variables Description Path Following Type \u201cStrict\u201d path following is the old fashion way for followers to follow paths , it means that the follower will follow exactly the raw spline data provided, \u201cProjected\u201d path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow.","title":"Scene Click"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/#projected-path-following","text":"Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow when \u201cProjected\u201d is selected, you get the following settings which will allow you to perform advanced customization Variables Description Ray transform Used to define the position and direction of your obstacles sensor ray. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Follow Ground Normal the follower will lineup its Upward direction with the ground normal direction if set to true, if set to false then the follower upward direction will be the spline raw normal data,","title":"Projected Path Following"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/#animation-events","text":"Variables Description OnAwakeDelayTime Used to delay the triggering of the \u201cOnAwake\u201d event when the game starts OnAwake triggered when the game starts OnMove triggered when the follower moves . IDLE triggered when the follower stops. Space triggered when Space key is pressed.","title":"Animation Events"},{"location":"Unity3D/SplinePathFinding/FollowerSettings/#events","text":"An advanced events system that fully covers all the possibilities, To setup your events you need to provide two variants , previous branch key and next branch key , then the data provided is stored in an Event conditions array , once one of the conditions in the array is met then the corresponding event will trigger . Variables Description Event Title Editable text field to customize your event name Previous Branch Previous branch key Next Branch Next branch key Conditions List Conditions string array My Events Events that should be trigerred when one of the conditions in the conditions array is met","title":"Events"},{"location":"Unity3D/SplinePathFinding/Inspector/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } Goal Variables Description Goal Settings This opens the goal settings window, it\u2019s similar to follower settings explained in detail above. Goal game object slot The game object that you want to use as a goal for your agent game objects to find. On/Off switch Used to enable disable follower animation. Progress Progress is the current distance of the goal on the branch, the max is the length of the branch. Speed The speed of the goal Branch key Used to change Goal branch in the editor, To add the branch key select the branch from scene view then click on the \u2018return\u2019 button, the key will be added automatically to the field Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed. Agent Variables Description Agent settings Click on this button to open the agent settings window, it\u2019s a bit different than the other follower settings windows, you will find detailed explanation about this window bellow. Agent game object slot The game object that you want to use as an agent for your goal game objects to follow. On/Off switch Used to enable disable agent animation. Progress The current distance of the agent on the branch, the max is the length of the branch. Speed The speed of the agent. Branch key Agent start branch key , this is the branch key the agent will start path following on , To add the branch key select the branch from scene view then click on the \u2018Return\u2019 button the key will be added automatically to the field. Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed.","title":"Inspector"},{"location":"Unity3D/SplinePathFinding/Inspector/#goal","text":"Variables Description Goal Settings This opens the goal settings window, it\u2019s similar to follower settings explained in detail above. Goal game object slot The game object that you want to use as a goal for your agent game objects to find. On/Off switch Used to enable disable follower animation. Progress Progress is the current distance of the goal on the branch, the max is the length of the branch. Speed The speed of the goal Branch key Used to change Goal branch in the editor, To add the branch key select the branch from scene view then click on the \u2018return\u2019 button, the key will be added automatically to the field Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed.","title":"Goal"},{"location":"Unity3D/SplinePathFinding/Inspector/#agent","text":"Variables Description Agent settings Click on this button to open the agent settings window, it\u2019s a bit different than the other follower settings windows, you will find detailed explanation about this window bellow. Agent game object slot The game object that you want to use as an agent for your goal game objects to follow. On/Off switch Used to enable disable agent animation. Progress The current distance of the agent on the branch, the max is the length of the branch. Speed The speed of the agent. Branch key Agent start branch key , this is the branch key the agent will start path following on , To add the branch key select the branch from scene view then click on the \u2018Return\u2019 button the key will be added automatically to the field. Position Translation of the agent with a button to switch between World and local space. Rotation Rotation of the agent, with a button to turn Rotation On/Off in case it is needed.","title":"Agent"},{"location":"Unity3D/SplinePathFinding/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Introduction Spline Path Finding is a path finding system that works on splines, it is a combination of Spline Plus as a branching spline system and Dijkstra path finding algorithm,","title":"Introduction"},{"location":"Unity3D/SplinePathFinding/Introduction/#introduction","text":"Spline Path Finding is a path finding system that works on splines, it is a combination of Spline Plus as a branching spline system and Dijkstra path finding algorithm,","title":"Introduction"},{"location":"Unity3D/SplinePlus/FollowerSettings/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } This window is opened when follower settings button is pressed, it contains additional follower settings such as animation type and follower events Variables Description Follower animation type \u201cAuto animated\u201d move your follower with a defined speed along the spline. \u201cKeyboard input\u201d move your follower using keyboard inputs, \u201cScene click\u201d move your follower to the closest spline vertex to your scene view mouse click. Auto Animated Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Projected Path Following Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources, surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see in the \"Projected path following\" section bellow. Keyboard Input Move followers on the spline based on keyboard inputs. Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Brake force this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Projected Path Following Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower ,one for the ground and one for the obstacles in front as you can see in the \"Projected path following\" section bellow. Scene Click Scene click is used to move followers on the spline based on game view mouse click position, this has no settings to display. Projected Path Following Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow when \u201cProjected\u201d is selected, you get the following settings which will allow you to perform advanced customization Variables Description Layer Mask Specifies layers to use in your projection rays Ray transform Used to define the position and direction of your obstacles sensor ray. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Follow Ground Normal the follower will lineup its Upward direction with the ground normal direction if set to true, if set to false then the follower upward direction will be the spline raw normal data, Animation Events Variables Description OnAwakeDelayTime Used to delay the triggering of the \u201cOnAwake\u201d event when the game starts OnAwake triggered when the game starts OnMove triggered when the follower moves . IDLE triggered when the follower stops. Space triggered when Space key is pressed. Events An advanced events system that fully covers all the possibilities, To setup your events you need to provide two variants , previous branch key and next branch key , then the data provided is stored in an Event conditions array , once one of the conditions in the array is met then the corresponding event will trigger . Variables Description Event Title Editable text field to customize your event name Event type Branch Variables Description Previous Branch Previous branch key Next Branch Next branch key Conditions List Conditions string array My Events Events that should be trigerred when one of the conditions in the conditions array is met Node Variables Description Detect direction The follower direction required to trigger an event when follower is on the node there are 3 options that you can choose from Both , Forward , Backward . Node this is the node transform that will hold the event element. My Events Events that should be trigerred when one of the conditions in the conditions array is met","title":"Follower Settings"},{"location":"Unity3D/SplinePlus/FollowerSettings/#auto-animated","text":"Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Projected Path Following Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources, surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see in the \"Projected path following\" section bellow.","title":"Auto Animated"},{"location":"Unity3D/SplinePlus/FollowerSettings/#keyboard-input","text":"Move followers on the spline based on keyboard inputs. Variables Description Acceleration this is the time in seconds it takes for the follower to gain it\u2019s full speed or completely stop when game starts. Brake force this represents the brakes force, the minimum value for this is 1\u201dno impact on follower speed\u201d. brakes force will impact the follower speed as its value goes up, Flip direction this will allow you to keep the follower forward direction when you switch between \u201cUp arrow key\u201d and \u201cDown arrow key\u201d. Projected Path Following Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower ,one for the ground and one for the obstacles in front as you can see in the \"Projected path following\" section bellow.","title":"Keyboard Input"},{"location":"Unity3D/SplinePlus/FollowerSettings/#scene-click","text":"Scene click is used to move followers on the spline based on game view mouse click position, this has no settings to display.","title":"Scene Click"},{"location":"Unity3D/SplinePlus/FollowerSettings/#projected-path-following","text":"Projected path following is using raycasting on followers to sense its surroundings, the path following data is being gathered from both sources , surrounding and raw spline data then it will be combined to form one final modified path following data to be used by the follower, there are currently two ray sensors on each follower , one for the ground and one for the obstacles in front as you can see bellow when \u201cProjected\u201d is selected, you get the following settings which will allow you to perform advanced customization Variables Description Layer Mask Specifies layers to use in your projection rays Ray transform Used to define the position and direction of your obstacles sensor ray. Ground Ray Length used to edit the ground sensor ray length. Obstacle Ray Length used to edit the obstacle sensor ray length. Follow Ground Normal the follower will lineup its Upward direction with the ground normal direction if set to true, if set to false then the follower upward direction will be the spline raw normal data,","title":"Projected Path Following"},{"location":"Unity3D/SplinePlus/FollowerSettings/#animation-events","text":"Variables Description OnAwakeDelayTime Used to delay the triggering of the \u201cOnAwake\u201d event when the game starts OnAwake triggered when the game starts OnMove triggered when the follower moves . IDLE triggered when the follower stops. Space triggered when Space key is pressed.","title":"Animation Events"},{"location":"Unity3D/SplinePlus/FollowerSettings/#events","text":"An advanced events system that fully covers all the possibilities, To setup your events you need to provide two variants , previous branch key and next branch key , then the data provided is stored in an Event conditions array , once one of the conditions in the array is met then the corresponding event will trigger . Variables Description Event Title Editable text field to customize your event name","title":"Events"},{"location":"Unity3D/SplinePlus/FollowerSettings/#event-type","text":"","title":"Event type"},{"location":"Unity3D/SplinePlus/FollowerSettings/#branch","text":"Variables Description Previous Branch Previous branch key Next Branch Next branch key Conditions List Conditions string array My Events Events that should be trigerred when one of the conditions in the conditions array is met","title":"Branch"},{"location":"Unity3D/SplinePlus/FollowerSettings/#node","text":"Variables Description Detect direction The follower direction required to trigger an event when follower is on the node there are 3 options that you can choose from Both , Forward , Backward . Node this is the node transform that will hold the event element. My Events Events that should be trigerred when one of the conditions in the conditions array is met","title":"Node"},{"location":"Unity3D/SplinePlus/GeneralInformation/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } Instalation and Setup First of all, import the asset into your project, The asset will create a folder 'ElseForty' under your Assets directory. You will get a custom menu \"Tools\" added in case you didn't have one already like in the image bellow. You can start adding spline plus game objects to your scene hierarchy from there. Node They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , Info You can select a node directly from scene view by clicking on the node. For the node selection to succeed, make sure the node branch is selected first (branch is green). Branch A branch is formed by nodes. the selected branch is marked with green color in your scene view as it is shown in the image bellow, Info Click on the branch in your scene view to select it. Shared node A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow","title":"General information"},{"location":"Unity3D/SplinePlus/GeneralInformation/#instalation-and-setup","text":"First of all, import the asset into your project, The asset will create a folder 'ElseForty' under your Assets directory. You will get a custom menu \"Tools\" added in case you didn't have one already like in the image bellow. You can start adding spline plus game objects to your scene hierarchy from there.","title":"Instalation and Setup"},{"location":"Unity3D/SplinePlus/GeneralInformation/#node","text":"They form a branch, they are marked in the scene view with a sphere as shown bellow in the image , Info You can select a node directly from scene view by clicking on the node. For the node selection to succeed, make sure the node branch is selected first (branch is green).","title":"Node"},{"location":"Unity3D/SplinePlus/GeneralInformation/#branch","text":"A branch is formed by nodes. the selected branch is marked with green color in your scene view as it is shown in the image bellow, Info Click on the branch in your scene view to select it.","title":"Branch"},{"location":"Unity3D/SplinePlus/GeneralInformation/#shared-node","text":"A shared node is a node that is shared by more than one branch, it is represented by a purple sphere in your scene view, like in the image bellow","title":"Shared node"},{"location":"Unity3D/SplinePlus/GeneralSettings/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } Variables Description Node type the default node type you want to use when adding new nodes. Gizmos This hides and unhides the gizmos in your scene view. Gizmos size This appears only if gizmos is set to On, This allows you to control the size of the gizmos in you scene view . Helpers This hides and unhides the normals tangents representation in the scene view Helpers size This appears only if helpers is set to \"On\", this controls the helpers size. Secondary handles This hides and unhides secondary handles of the selected node. Colors All nodes gizmos colors can be changed from here","title":"General Settings"},{"location":"Unity3D/SplinePlus/Inspector/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } File Menu Variables Description Open Open a \".SP\" file Save Save spline data in a \".SP\" file Append Append a \".SP\" file with the current spline data, this can be used as an \"Attach\" action which can help quickly build splines with repeated patterns Documentation Open documentation website Followers Variables Description Followers type this is where you get to select which type of follower settings you want to display in your inspector, currently there are 3 follower types supported. Simple: this is the basic follower type. Train: as you can tell from its name, follower with animation behaviour similar to trains. Path finding: Only available if you have Spline Path Finding package in your project, this is used to create path finding animation behaviour. Simple Variables Description Follower Settings This opens the follower settings window ,You will find detailed explanation below. Follower game object slot The game object that you want to use as follower, it could be a character, a particle system, camera, any kind of gameObjects. On/Off switch Used to enable disable follower animation. Progress Progress is the current distance of the follower on the branch, the max is the length of the branch. Speed The speed of the follower. Branch key Current follower branch, this can be changed to move the follower to another branch To add a branch key, select the branch from your scene view then click on , the key will be automatically added to the text field . Position Translation of the follower with a button to switch between World and local space. Rotation Rotation of the follower, with a button to turn Rotation On/Off in case it is needed. Trains PathFinding Selected Node This section is used to control the node position and its handles manually from the editor, this can be useful in case you\u2019re seeking precision in positioning your nodes, Projection Project the spline into 3D mesh, for this to work, the meshes where the spline plus object is being projected into needs to have a 3D collider on. Variables Description Project Spline Project the spline into your environment meshes . Raycast length The length of the projection raycast. Offset The local translation offset applied to the spline on the Y axis in case offsetting spline is required. Show projection rays Used to display the rays in your scene view. Handles projection Enables the handles projection as well, this will increases projection precision. Mesh orientation Override the spline normals with the projection mesh normals. Spline Variables Description Reference axis The spline normals default direction, this is used to change the reference normal direction of the spline, it is very useful when changing the scene view mode for an example. Smoothness This changes the number of vertices between two nodes, it controls the smoothness of your spline curve. Attach Attach a copy of another Spline plus Object, this can be used to speed paths drawing when having similar path patterns. Interpolate rotation this creates a rotation lerp between vertices when set to On, which will gives a very smooth rotation when path following. Constant speed Enable/disable speed variation on nodes, it is better to set it to \u201cOff\u201d for performance sake if you are not using speed variation on nodes. Looped Used to close the spline shape in case you have a spline with one branch. Spline Mesh Deform Warning You will get this only if you have Spline Mesh deform package installed in your project . Spline mesh deform is a procedural mesh generation modifiers collection for \"Spline plus\". it has 4 modifiers: Mesh deform: A procedural mesh generation tool on all Spline plus branches for custom meshes Extrude shape: Extrude Spline plus branches and transform them into a procedural mesh Tube mesh: Convert Spline plus branches into tube meshes, Plane mesh: Convert Spline plus branches into plane meshes, similar to Unity ' line renderer '","title":"Inspector"},{"location":"Unity3D/SplinePlus/Inspector/#file-menu","text":"Variables Description Open Open a \".SP\" file Save Save spline data in a \".SP\" file Append Append a \".SP\" file with the current spline data, this can be used as an \"Attach\" action which can help quickly build splines with repeated patterns Documentation Open documentation website","title":"File Menu"},{"location":"Unity3D/SplinePlus/Inspector/#followers","text":"Variables Description Followers type this is where you get to select which type of follower settings you want to display in your inspector, currently there are 3 follower types supported. Simple: this is the basic follower type. Train: as you can tell from its name, follower with animation behaviour similar to trains. Path finding: Only available if you have Spline Path Finding package in your project, this is used to create path finding animation behaviour.","title":"Followers"},{"location":"Unity3D/SplinePlus/Inspector/#simple","text":"Variables Description Follower Settings This opens the follower settings window ,You will find detailed explanation below. Follower game object slot The game object that you want to use as follower, it could be a character, a particle system, camera, any kind of gameObjects. On/Off switch Used to enable disable follower animation. Progress Progress is the current distance of the follower on the branch, the max is the length of the branch. Speed The speed of the follower. Branch key Current follower branch, this can be changed to move the follower to another branch To add a branch key, select the branch from your scene view then click on , the key will be automatically added to the text field . Position Translation of the follower with a button to switch between World and local space. Rotation Rotation of the follower, with a button to turn Rotation On/Off in case it is needed.","title":"Simple"},{"location":"Unity3D/SplinePlus/Inspector/#trains","text":"","title":"Trains"},{"location":"Unity3D/SplinePlus/Inspector/#pathfinding","text":"","title":"PathFinding"},{"location":"Unity3D/SplinePlus/Inspector/#selected-node","text":"This section is used to control the node position and its handles manually from the editor, this can be useful in case you\u2019re seeking precision in positioning your nodes,","title":"Selected Node"},{"location":"Unity3D/SplinePlus/Inspector/#projection","text":"Project the spline into 3D mesh, for this to work, the meshes where the spline plus object is being projected into needs to have a 3D collider on. Variables Description Project Spline Project the spline into your environment meshes . Raycast length The length of the projection raycast. Offset The local translation offset applied to the spline on the Y axis in case offsetting spline is required. Show projection rays Used to display the rays in your scene view. Handles projection Enables the handles projection as well, this will increases projection precision. Mesh orientation Override the spline normals with the projection mesh normals.","title":"Projection"},{"location":"Unity3D/SplinePlus/Inspector/#spline","text":"Variables Description Reference axis The spline normals default direction, this is used to change the reference normal direction of the spline, it is very useful when changing the scene view mode for an example. Smoothness This changes the number of vertices between two nodes, it controls the smoothness of your spline curve. Attach Attach a copy of another Spline plus Object, this can be used to speed paths drawing when having similar path patterns. Interpolate rotation this creates a rotation lerp between vertices when set to On, which will gives a very smooth rotation when path following. Constant speed Enable/disable speed variation on nodes, it is better to set it to \u201cOff\u201d for performance sake if you are not using speed variation on nodes. Looped Used to close the spline shape in case you have a spline with one branch.","title":"Spline"},{"location":"Unity3D/SplinePlus/Inspector/#spline-mesh-deform","text":"Warning You will get this only if you have Spline Mesh deform package installed in your project . Spline mesh deform is a procedural mesh generation modifiers collection for \"Spline plus\". it has 4 modifiers: Mesh deform: A procedural mesh generation tool on all Spline plus branches for custom meshes Extrude shape: Extrude Spline plus branches and transform them into a procedural mesh Tube mesh: Convert Spline plus branches into tube meshes, Plane mesh: Convert Spline plus branches into plane meshes, similar to Unity ' line renderer '","title":"Spline Mesh Deform"},{"location":"Unity3D/SplinePlus/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline plus is an advanced spline system and path following tool for Unity3D. Feartures Branching Advanced branch picking options at intersections Versatile Follower types : Simple, Trains Node curve type : Smooth, Broken, Free Advanced spline events system Spline (Shape/Follower animations) projection on mesh Follower animation type : Auto, Keyboard, Scene click Follower animation smooth (Acceleration/Deceleration) Node (Speed/Normal) control Append and Save spline data using \".SP\" files Use of Unity Reorderable lists API to Create splines during runtime (Simple /Shared) nodes chamfering Highly optimized Full source code included Example scenes included","title":"Introduction"},{"location":"Unity3D/SplinePlus/Introduction/#feartures","text":"Branching Advanced branch picking options at intersections Versatile Follower types : Simple, Trains Node curve type : Smooth, Broken, Free Advanced spline events system Spline (Shape/Follower animations) projection on mesh Follower animation type : Auto, Keyboard, Scene click Follower animation smooth (Acceleration/Deceleration) Node (Speed/Normal) control Append and Save spline data using \".SP\" files Use of Unity Reorderable lists API to Create splines during runtime (Simple /Shared) nodes chamfering Highly optimized Full source code included Example scenes included","title":"Feartures"},{"location":"Unity3D/SplinePlus/PathGenerator/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } This is a straightforward subtool to auto generate complex splines in no time, all you have to do is to provide the game objects to the Path generator and click create and your path will be served in no time You can access path generator from here When clicked you will get a new game object added to your scene hierarchy like bellow The inspector of the PathGenerator game object will resemble to something like this Variables Description Branches list this will allow you to add, delete, reoganize your branches Radius This is where you can control the chamfering of your shared nodes Create path This generates the final path , it creates a gameObject in your hierarchy with a spline plus component holding the data. Here is an example of the generation of a path based on game object placed in scene view","title":"Path Generator"},{"location":"Unity3D/SplinePlus/SceneViewUI/","text":"img { display: block; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.5); } Debuging Area Used to display the data you are currently selecting Variables Description Branch The selected branch key (integer) in the branches dictionary Used to change branches selection , this can be very useful when a branch is unselectable in your scene view ( branch has only one node) Node The selected node index in the nodes list of the selected branch Connected branches The branches keys connected to the selected shared node in case one is selected, if not then null is shown Spline Editing Area Buttons Description Snap all nodes and their handles to Unity grid Turn pivot editing mode On, once clicked the icon turns to green then you can move spline plus game object pivot freely without affecting the nodes transforms, once you\u2019re happy with your new pivot transform click again on the button to save changes and turn pivot editing mode to Off, Smooth regular and shared nodes, once this button is clicked you get a message box to control your smooth radius, Add a new branch, you need to have a node selected before clicking on the add branch button, the selected node will be considered as the origin of the newly created branch. Delete the selected branch. this flips the handles position of the selected node , this is very useful when drawing your spline ,it helps you get the desirable spline shape you want the blue arrow indicates the start of the selected branch this is used to break a branch at the selected node. Reverse button is used to reverse the direction of the branch selected, the blue arrow indicates the start of the selected branch Selected Node Area Variables Description Type The selected node type, Free ,Smooth, broken Normal The selected node normal value, the value is set to zero by default, it varies from -180 to 180 To visualize the normals of the spline plus object you have to enable \u201cHelpers\u201d which can be found under Tools= Spline plus= General settings , Speed This will allow you to control speed value of the selected node The speed variation [0,100] is represented by a spline color variation, red color means that the speed is minimum at that position, if color is green or gray then speed is maximum Shared node type There are 2 types of shared nodes in Spline plus, Random: represented with a purple sphere, it is used when you want your followers to randomly pick a branch at that shared node, Info: The random branch picking selection will be done between branches 4,3,5 for the example below, but branches 4 and 5 are going to be excluded because of the wrong curvature they have, so the only choice left is 3 In this new example below the random branches picking is going to be done between branches 5,3,4. All branches curvatures are normal in this new case, so all the options are going to be taken into consideration. Defined: represented with a Blue sphere, this is used to predefine the branch you want your followers to take when it reaches a shared node, You have 4 branches to setup, Left , Right, Forward and backward Ps: to add a branch index, you need to first select the branch from the scene view then click on , the branch key will be inserted automatically into the text box.","title":"Scene view UI"},{"location":"Unity3D/SplinePlus/SceneViewUI/#debuging-area","text":"Used to display the data you are currently selecting Variables Description Branch The selected branch key (integer) in the branches dictionary Used to change branches selection , this can be very useful when a branch is unselectable in your scene view ( branch has only one node) Node The selected node index in the nodes list of the selected branch Connected branches The branches keys connected to the selected shared node in case one is selected, if not then null is shown","title":"Debuging Area"},{"location":"Unity3D/SplinePlus/SceneViewUI/#spline-editing-area","text":"Buttons Description Snap all nodes and their handles to Unity grid Turn pivot editing mode On, once clicked the icon turns to green then you can move spline plus game object pivot freely without affecting the nodes transforms, once you\u2019re happy with your new pivot transform click again on the button to save changes and turn pivot editing mode to Off, Smooth regular and shared nodes, once this button is clicked you get a message box to control your smooth radius, Add a new branch, you need to have a node selected before clicking on the add branch button, the selected node will be considered as the origin of the newly created branch. Delete the selected branch. this flips the handles position of the selected node , this is very useful when drawing your spline ,it helps you get the desirable spline shape you want the blue arrow indicates the start of the selected branch this is used to break a branch at the selected node. Reverse button is used to reverse the direction of the branch selected, the blue arrow indicates the start of the selected branch","title":"Spline Editing Area"},{"location":"Unity3D/SplinePlus/SceneViewUI/#selected-node-area","text":"Variables Description Type The selected node type, Free ,Smooth, broken Normal The selected node normal value, the value is set to zero by default, it varies from -180 to 180 To visualize the normals of the spline plus object you have to enable \u201cHelpers\u201d which can be found under Tools= Spline plus= General settings , Speed This will allow you to control speed value of the selected node The speed variation [0,100] is represented by a spline color variation, red color means that the speed is minimum at that position, if color is green or gray then speed is maximum Shared node type There are 2 types of shared nodes in Spline plus, Random: represented with a purple sphere, it is used when you want your followers to randomly pick a branch at that shared node, Info: The random branch picking selection will be done between branches 4,3,5 for the example below, but branches 4 and 5 are going to be excluded because of the wrong curvature they have, so the only choice left is 3 In this new example below the random branches picking is going to be done between branches 5,3,4. All branches curvatures are normal in this new case, so all the options are going to be taken into consideration. Defined: represented with a Blue sphere, this is used to predefine the branch you want your followers to take when it reaches a shared node, You have 4 branches to setup, Left , Right, Forward and backward Ps: to add a branch index, you need to first select the branch from the scene view then click on , the branch key will be inserted automatically into the text box.","title":"Selected Node Area"},{"location":"Unity3D/SplinePlus/Shortcuts/","text":"\u201cShift key\u201d Spline Editing , Adding nodes, Deleting nodes \u201cS key\u201d Convert selected node mode to Smooth \u201cB key\u201d Convert selected node mode to broken \u201cF key\u201d Convert selected node mode to free \u201cZ key\u201d Focus scene view camera on the selected node","title":"Shortcuts"},{"location":"Unity3D/SplinePlus/SplineEditing/","text":"Nodes Tip All nodes editing actions are under one shortcut key which is the \u201dShift key\u201d in your keyboard Add At the ends of a branch: Press \"Shift key\" on the keyboard and click anywhere on your scene view to add a node on the currently selected branch if spline plus has zero branches then a new branch is created automatically and a new node is added to the newly created branch at the mouse position click, if both branch forks are welded then the action of adding a new node is aborted, if both branch forks are unwelded, then the bridge with the newly created node is established with the branch fork with less distance to the mouse position click, if the branch has only one unwelded fork then the connection is established with the unwelded fork, In the middle of a branch: Hold \"Shift key\" on the keyboard , you will get a \u201cyellow\u201d sphere traveling along the selected branch based on mouse position, once you are on the desirable position, perform a mouse click to add your node. Delete It is like adding nodes in the middle of a branch, Hold \"Shift key\" on the keyboard , move your mouse to target the nodes that you want to delete , once you get closer to it, the yellow sphere snaps to the node and its color turns to red instead , to delete the node just perform a mouse click, Branches branches editing is done using this scene view UI shown bellow Add Select a node from your scene view, next click on the to add your new branch Delete Select the branch you want to delete from your scene view, then click on the to delete it. Weld Select an unwelded branch, Press \"Shift key\" on keyboard , now all you have to do is to pick a node that you want your branch to form a bridge with,","title":"Spline editing"},{"location":"Unity3D/SplinePlus/SplineEditing/#nodes","text":"Tip All nodes editing actions are under one shortcut key which is the \u201dShift key\u201d in your keyboard","title":"Nodes"},{"location":"Unity3D/SplinePlus/SplineEditing/#add","text":"","title":"Add"},{"location":"Unity3D/SplinePlus/SplineEditing/#at-the-ends-of-a-branch","text":"Press \"Shift key\" on the keyboard and click anywhere on your scene view to add a node on the currently selected branch if spline plus has zero branches then a new branch is created automatically and a new node is added to the newly created branch at the mouse position click, if both branch forks are welded then the action of adding a new node is aborted, if both branch forks are unwelded, then the bridge with the newly created node is established with the branch fork with less distance to the mouse position click, if the branch has only one unwelded fork then the connection is established with the unwelded fork,","title":"At the ends of a branch:"},{"location":"Unity3D/SplinePlus/SplineEditing/#in-the-middle-of-a-branch","text":"Hold \"Shift key\" on the keyboard , you will get a \u201cyellow\u201d sphere traveling along the selected branch based on mouse position, once you are on the desirable position, perform a mouse click to add your node.","title":"In the middle of a branch:"},{"location":"Unity3D/SplinePlus/SplineEditing/#delete","text":"It is like adding nodes in the middle of a branch, Hold \"Shift key\" on the keyboard , move your mouse to target the nodes that you want to delete , once you get closer to it, the yellow sphere snaps to the node and its color turns to red instead , to delete the node just perform a mouse click,","title":"Delete"},{"location":"Unity3D/SplinePlus/SplineEditing/#branches","text":"branches editing is done using this scene view UI shown bellow","title":"Branches"},{"location":"Unity3D/SplinePlus/SplineEditing/#add_1","text":"Select a node from your scene view, next click on the to add your new branch","title":"Add"},{"location":"Unity3D/SplinePlus/SplineEditing/#delete_1","text":"Select the branch you want to delete from your scene view, then click on the to delete it.","title":"Delete"},{"location":"Unity3D/SplinePlus/SplineEditing/#weld","text":"Select an unwelded branch, Press \"Shift key\" on keyboard , now all you have to do is to pick a node that you want your branch to form a bridge with,","title":"Weld"},{"location":"Unity3D/SplinePlus/API/DataAccess/","text":"img { display: block; margin-left: auto; margin-right: auto; } SPData (Spline Plus Data) SPData is a data class for the monobehaviour Spline Plus, all data access for a Spline Plus Game object should be done from SPData you can get the SPData if you already have your spline plus game object in your scene view like this SPData sPData ; public void Start (){ sPData = GetComponent SplinePlus (). SPData ; } When using the Spline plus API , this is how you can get the SPData SPData sPData ; public void Start (){ sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); } Branches Spline plus is a branching spline system which means that it supports multiple branches, Branches are stored in a Dictionnary, the reason behind using dictionnaries instead of lists is purely technical, the dictionnary keys are integers, To access a branch you do like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 Branch branch = sPData . DictBranches [ 3 ] ; } Nodes a branch is a group of nodes, so each branch object has a list of nodes for an example if you want to acces the nodes list of a branch, you do like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; } Node Points Transfoms that control the node position(Point) and node handles (Point1 and point2) \"Point1\" and \"Point2\" are transforms children of the main transform \"Point\" See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // change node position node . Point . Position = new Vector3 ( 10 , 2 , 8 ); // change node handles position node . Point1 . localPosition = new Vector3 ( 3 , 0 , 2 ); node . Point2 . localPosition = - node . Point1 . localPosition ; } Is node shared Check if the node is shared or not See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; if ( node . IsShared ) Debug . Log ( Node is shared ); else Debug . Log ( Node not shared ); } Node connected branches get the list of branch key connected to the node, if node is not shared you will get just one branch key See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; var nodeBranchKey = node . SharedNodeData . ConnectedBranches ; for ( int i = 0 ; i nodeBranchKey . Count ; i ++ ) { Debug . Log ( node is on branch with key + nodeBranchKey [ i ] ); } } Node speed The node speed value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; int nodeSpeed = node . SharedNodeData . Speed ; // node normals factor varies form -180 to 180 int nodeNormal = node . SharedNodeData . NormalFactor ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); } Node normal The node normal value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // node normals factor varies form -180 to 180 int nodeNormal = node . SharedNodeData . NormalFactor ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); } Node distance The node distance value on the branch See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; float nodeDistance = node . SharedNodeData . Distance ; } First/Last Node You can get the first or last node of your branch without having to access the nodes list, see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get first and last node of a branch Node firstNode = sPData . DictBranches [ 3 ] . FirstNode ; Node lastNode = sPData . DictBranches [ 3 ] . LastNode ; } Vertices, Normals, Tangents to access the branch Vertices, Normals, Tangents that defines the branch bezier you need to do something like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Vertices, Normals, Tangents of branch with key 3 List Vector3 vertices = sPData . DictBranches [ 3 ] . Vertices ; List Vector3 normals = sPData . DictBranches [ 3 ] . Normals ; List Vector3 tangents = sPData . DictBranches [ 3 ] . Tangents ; } Branch Length To get the branch length (Distance), see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get branch length float branchLength = sPData . DictBranches [ 3 ] . Length ; } Followers There are 3 type of followers in Spline plus Simple Followers This is the most basic form of followers in Spline Plus you can have access the list of simple followers like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; } Follower Game Object FollowerGO is the game object that you want to use as follower see example bellow on how to access follower game object SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its follower gameObject to MyFollower simpleFollowers [ 0 ] . FollowerGO = MyFollower ; } Progress Progress is the current distance of the follower on the branch, the max is the length of the branch. see example bellow on how to access follower progress SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its progress to 0 simpleFollowers [ 0 ] . Progress = 0 ; } Speed The speed of the follower. see example bellow on how to access follower speed SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its speed to 7 simpleFollowers [ 0 ] . Speed = 7 ; } Branch key Current follower branch. see example bellow on how to access follower branch key SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its branch key to 7 simpleFollowers [ 0 ] . BranchKey = 7 ; } Active Enable/Disable follower animation. use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Stop follower animation simpleFollowers [ 0 ] . Active = false ; } Distance Data To get the current position, rotation, vertex index of the follower use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower distance data //follower position Vector3 position = simpleFollowers [ 0 ] . DistanceData . Position ; //follower rotation Quaternion rotation = simpleFollowers [ 0 ] . DistanceData . Rotation ; //Current vertex index follower is on int vertexIndex = simpleFollowers [ 0 ] . DistanceData . Index ; } Train Followers Spline Plus has followers that behave like trains, you can have access the list of train followers like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of train followers List Train trains = sPData . Trains ; } Wagons To get access to wagons, which is basicaly a list of simple followers use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Train trains = sPData . Trains ; //Access first train wagons Train train = trains [ 0 ] ; //Access train wagons List Follower wagons = train . Wagons ; } Path Finding Followers If you have path finding package in your project then you should be able to access path finding followers like bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of train followers List PathFindingFollower pFFollowers = sPData . PFFollowers ; } Editor Selections Elements that you can access in edit mode in case you want to add more customized features based on your project need . Follower Index Get the follower index selection in the followers list in your spline plus inspector public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentFollowerIndex = sPData . Selections . _FollowerIndex ; } Branch key Get the scene view branch key selected in the branches dictionnary public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentbranchKey = sPData . Selections . _BranchKey ; } Node index Get the scene view node index selected in the branch nodes list public SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; Node currentNode = sPData . Selections . _NodeIndex ; } Agent index Get the inspector agent index selected from your agents list public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentLocalNodeIndex = sPData . Selections . _AgentIndex ; }","title":"Data Access"},{"location":"Unity3D/SplinePlus/API/DataAccess/#spdata-spline-plus-data","text":"SPData is a data class for the monobehaviour Spline Plus, all data access for a Spline Plus Game object should be done from SPData you can get the SPData if you already have your spline plus game object in your scene view like this SPData sPData ; public void Start (){ sPData = GetComponent SplinePlus (). SPData ; } When using the Spline plus API , this is how you can get the SPData SPData sPData ; public void Start (){ sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); }","title":"SPData (Spline Plus Data)"},{"location":"Unity3D/SplinePlus/API/DataAccess/#branches","text":"Spline plus is a branching spline system which means that it supports multiple branches, Branches are stored in a Dictionnary, the reason behind using dictionnaries instead of lists is purely technical, the dictionnary keys are integers, To access a branch you do like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 Branch branch = sPData . DictBranches [ 3 ] ; }","title":"Branches"},{"location":"Unity3D/SplinePlus/API/DataAccess/#nodes","text":"a branch is a group of nodes, so each branch object has a list of nodes for an example if you want to acces the nodes list of a branch, you do like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; }","title":"Nodes"},{"location":"Unity3D/SplinePlus/API/DataAccess/#node-points","text":"Transfoms that control the node position(Point) and node handles (Point1 and point2) \"Point1\" and \"Point2\" are transforms children of the main transform \"Point\" See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // change node position node . Point . Position = new Vector3 ( 10 , 2 , 8 ); // change node handles position node . Point1 . localPosition = new Vector3 ( 3 , 0 , 2 ); node . Point2 . localPosition = - node . Point1 . localPosition ; }","title":"Node Points"},{"location":"Unity3D/SplinePlus/API/DataAccess/#is-node-shared","text":"Check if the node is shared or not See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; if ( node . IsShared ) Debug . Log ( Node is shared ); else Debug . Log ( Node not shared ); }","title":"Is node shared"},{"location":"Unity3D/SplinePlus/API/DataAccess/#node-connected-branches","text":"get the list of branch key connected to the node, if node is not shared you will get just one branch key See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; var nodeBranchKey = node . SharedNodeData . ConnectedBranches ; for ( int i = 0 ; i nodeBranchKey . Count ; i ++ ) { Debug . Log ( node is on branch with key + nodeBranchKey [ i ] ); } }","title":"Node connected branches"},{"location":"Unity3D/SplinePlus/API/DataAccess/#node-speed","text":"The node speed value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; int nodeSpeed = node . SharedNodeData . Speed ; // node normals factor varies form -180 to 180 int nodeNormal = node . SharedNodeData . NormalFactor ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); }","title":"Node speed"},{"location":"Unity3D/SplinePlus/API/DataAccess/#node-normal","text":"The node normal value See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; // node normals factor varies form -180 to 180 int nodeNormal = node . SharedNodeData . NormalFactor ; //you need to call the function bellow to force the spline recalculation sPData . SplinePlus . SplineCreationClass . UpdateAllBranches ( sPData ); }","title":"Node normal"},{"location":"Unity3D/SplinePlus/API/DataAccess/#node-distance","text":"The node distance value on the branch See example bellow SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access branch with key 3 List Node nodes = sPData . DictBranches [ 3 ] . Nodes ; Node node = nodes [ 0 ] ; float nodeDistance = node . SharedNodeData . Distance ; }","title":"Node distance"},{"location":"Unity3D/SplinePlus/API/DataAccess/#firstlast-node","text":"You can get the first or last node of your branch without having to access the nodes list, see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get first and last node of a branch Node firstNode = sPData . DictBranches [ 3 ] . FirstNode ; Node lastNode = sPData . DictBranches [ 3 ] . LastNode ; }","title":"First/Last Node"},{"location":"Unity3D/SplinePlus/API/DataAccess/#vertices-normals-tangents","text":"to access the branch Vertices, Normals, Tangents that defines the branch bezier you need to do something like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Vertices, Normals, Tangents of branch with key 3 List Vector3 vertices = sPData . DictBranches [ 3 ] . Vertices ; List Vector3 normals = sPData . DictBranches [ 3 ] . Normals ; List Vector3 tangents = sPData . DictBranches [ 3 ] . Tangents ; }","title":"Vertices, Normals, Tangents"},{"location":"Unity3D/SplinePlus/API/DataAccess/#branch-length","text":"To get the branch length (Distance), see example bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Get branch length float branchLength = sPData . DictBranches [ 3 ] . Length ; }","title":"Branch Length"},{"location":"Unity3D/SplinePlus/API/DataAccess/#followers","text":"There are 3 type of followers in Spline plus","title":"Followers"},{"location":"Unity3D/SplinePlus/API/DataAccess/#simple-followers","text":"This is the most basic form of followers in Spline Plus you can have access the list of simple followers like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; }","title":"Simple Followers"},{"location":"Unity3D/SplinePlus/API/DataAccess/#follower-game-object","text":"FollowerGO is the game object that you want to use as follower see example bellow on how to access follower game object SPData sPData ; GameObject MyFollower ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its follower gameObject to MyFollower simpleFollowers [ 0 ] . FollowerGO = MyFollower ; }","title":"Follower Game Object"},{"location":"Unity3D/SplinePlus/API/DataAccess/#progress","text":"Progress is the current distance of the follower on the branch, the max is the length of the branch. see example bellow on how to access follower progress SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its progress to 0 simpleFollowers [ 0 ] . Progress = 0 ; }","title":"Progress"},{"location":"Unity3D/SplinePlus/API/DataAccess/#speed","text":"The speed of the follower. see example bellow on how to access follower speed SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its speed to 7 simpleFollowers [ 0 ] . Speed = 7 ; }","title":"Speed"},{"location":"Unity3D/SplinePlus/API/DataAccess/#branch-key","text":"Current follower branch. see example bellow on how to access follower branch key SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower and set its branch key to 7 simpleFollowers [ 0 ] . BranchKey = 7 ; }","title":"Branch key "},{"location":"Unity3D/SplinePlus/API/DataAccess/#active","text":"Enable/Disable follower animation. use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Stop follower animation simpleFollowers [ 0 ] . Active = false ; }","title":"Active"},{"location":"Unity3D/SplinePlus/API/DataAccess/#distance-data","text":"To get the current position, rotation, vertex index of the follower use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Follower simpleFollowers = sPData . Followers ; //Access first simple follower distance data //follower position Vector3 position = simpleFollowers [ 0 ] . DistanceData . Position ; //follower rotation Quaternion rotation = simpleFollowers [ 0 ] . DistanceData . Rotation ; //Current vertex index follower is on int vertexIndex = simpleFollowers [ 0 ] . DistanceData . Index ; }","title":"Distance Data"},{"location":"Unity3D/SplinePlus/API/DataAccess/#train-followers","text":"Spline Plus has followers that behave like trains, you can have access the list of train followers like this SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of train followers List Train trains = sPData . Trains ; }","title":"Train Followers"},{"location":"Unity3D/SplinePlus/API/DataAccess/#wagons","text":"To get access to wagons, which is basicaly a list of simple followers use the code bellow SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of simple followers List Train trains = sPData . Trains ; //Access first train wagons Train train = trains [ 0 ] ; //Access train wagons List Follower wagons = train . Wagons ; }","title":"Wagons"},{"location":"Unity3D/SplinePlus/API/DataAccess/#path-finding-followers","text":"If you have path finding package in your project then you should be able to access path finding followers like bellow SPData sPData ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access list of train followers List PathFindingFollower pFFollowers = sPData . PFFollowers ; }","title":"Path Finding Followers"},{"location":"Unity3D/SplinePlus/API/DataAccess/#editor-selections","text":"Elements that you can access in edit mode in case you want to add more customized features based on your project need .","title":"Editor Selections"},{"location":"Unity3D/SplinePlus/API/DataAccess/#follower-index","text":"Get the follower index selection in the followers list in your spline plus inspector public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentFollowerIndex = sPData . Selections . _FollowerIndex ; }","title":"Follower Index"},{"location":"Unity3D/SplinePlus/API/DataAccess/#branch-key_1","text":"Get the scene view branch key selected in the branches dictionnary public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentbranchKey = sPData . Selections . _BranchKey ; }","title":"Branch key"},{"location":"Unity3D/SplinePlus/API/DataAccess/#node-index","text":"Get the scene view node index selected in the branch nodes list public SPData sPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; Node currentNode = sPData . Selections . _NodeIndex ; }","title":"Node index"},{"location":"Unity3D/SplinePlus/API/DataAccess/#agent-index","text":"Get the inspector agent index selected from your agents list public SPData SPData ; void Start () { sPData = GetComponent SplinePlus (). SPData ; int currentLocalNodeIndex = sPData . Selections . _AgentIndex ; }","title":"Agent index"},{"location":"Unity3D/SplinePlus/API/Examples/","text":"img { display: block; margin-left: auto; margin-right: auto; } Chamfered square Code for the generation of a chamfered square spline shape, Please read code comments for better understanding public GameObject Follower1 ; public GameObject Follower2 ; SPData sPData ; public void Start () { //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . CreateSplinePlus ( Vector3 . zero ); //create 4 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 )); var node3 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 10 )); var node4 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 10 )); //Connect those nodes with each other SplinePlusAPI . ConnectTwoNodes ( sPData , node1 , node2 ); SplinePlusAPI . ConnectTwoNodes ( sPData , node2 , node3 ); SplinePlusAPI . ConnectTwoNodes ( sPData , node3 , node4 ); SplinePlusAPI . ConnectTwoNodes ( sPData , node4 , node1 ); // scan the sPData for shared nodes, smooth all shared nodes found with a radius value of 0.5 SplinePlusAPI . SmoothAllSharedNodes ( sPData , 0.5f ); //followers section FollowerSettings ( sPData ); } Without the SmoothAllSharedNodes() method With the SmoothAllSharedNodes() method Followers setup Now the next chapter is try to add followers during runtime this function is called when you are done with your spline shape drawing Please read code comments for better understanding void FollowerSettings ( SPData sPData ) { //create two follower objects Follower follower1 = new Follower (); Follower follower2 = new Follower (); //Add them to followers list sPData . Followers . Add ( follower1 ); sPData . Followers . Add ( follower2 ); //set up your first follower SplinePlusAPI . Follower_AnimationType ( follower2 , FollowerAnimation . Auto ); SplinePlusAPI . Follower_GameObject ( follower1 , Follower1Go ); SplinePlusAPI . Follower_Speed ( follower1 , 10 ); SplinePlusAPI . Follower_Active ( follower1 , true ); //set up your second follower SplinePlusAPI . Follower_AnimationType ( follower2 , FollowerAnimation . Auto ); SplinePlusAPI . Follower_GameObject ( follower2 , Follower2Go ); SplinePlusAPI . Follower_Speed ( follower2 , 5 ); SplinePlusAPI . Follower_Active ( follower2 , true ); }","title":"Examples"},{"location":"Unity3D/SplinePlus/API/Examples/#chamfered-square","text":"Code for the generation of a chamfered square spline shape, Please read code comments for better understanding public GameObject Follower1 ; public GameObject Follower2 ; SPData sPData ; public void Start () { //create a spline plus gameObject and catch the SPData object to use for later sPData = SplinePlusAPI . CreateSplinePlus ( Vector3 . zero ); //create 4 nodes in the sPData object var node1 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 0 )); var node2 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 0 )); var node3 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 10 , 0 , 10 )); var node4 = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 0 , 0 , 10 )); //Connect those nodes with each other SplinePlusAPI . ConnectTwoNodes ( sPData , node1 , node2 ); SplinePlusAPI . ConnectTwoNodes ( sPData , node2 , node3 ); SplinePlusAPI . ConnectTwoNodes ( sPData , node3 , node4 ); SplinePlusAPI . ConnectTwoNodes ( sPData , node4 , node1 ); // scan the sPData for shared nodes, smooth all shared nodes found with a radius value of 0.5 SplinePlusAPI . SmoothAllSharedNodes ( sPData , 0.5f ); //followers section FollowerSettings ( sPData ); } Without the SmoothAllSharedNodes() method With the SmoothAllSharedNodes() method","title":"Chamfered square"},{"location":"Unity3D/SplinePlus/API/Examples/#followers-setup","text":"Now the next chapter is try to add followers during runtime this function is called when you are done with your spline shape drawing Please read code comments for better understanding void FollowerSettings ( SPData sPData ) { //create two follower objects Follower follower1 = new Follower (); Follower follower2 = new Follower (); //Add them to followers list sPData . Followers . Add ( follower1 ); sPData . Followers . Add ( follower2 ); //set up your first follower SplinePlusAPI . Follower_AnimationType ( follower2 , FollowerAnimation . Auto ); SplinePlusAPI . Follower_GameObject ( follower1 , Follower1Go ); SplinePlusAPI . Follower_Speed ( follower1 , 10 ); SplinePlusAPI . Follower_Active ( follower1 , true ); //set up your second follower SplinePlusAPI . Follower_AnimationType ( follower2 , FollowerAnimation . Auto ); SplinePlusAPI . Follower_GameObject ( follower2 , Follower2Go ); SplinePlusAPI . Follower_Speed ( follower2 , 5 ); SplinePlusAPI . Follower_Active ( follower2 , true ); }","title":"Followers setup"},{"location":"Unity3D/SplinePlus/API/Methods/","text":"img { display: block; margin-left: auto; margin-right: auto; } Spline Plus API All API methods are under the static class SplinePlusAPI, Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); Create Spline plus public static SPData CreateSplinePlus ( Vector3 position ) This creates a Spline Plus game object at a Vector3 position , this function returns the SPData object created, Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); Nodes Create node public static Node Node_Create ( SPData sPData , Vector3 pointPos , Vector3 point1Pos = new Vector3 (), Vector3 point2Pos = new Vector3 () , NodeType nodeType = NodeType . Smooth , SharedNodeType sharedNodeType = SharedNodeType . Random , int nodeSpeed = 100 , int nodeNormal = 0 , int left = - 1 , int right = - 1 , int forward = - 1 , int backward = - 1 , bool weld = true ) This generates a node object in a Vector3 position. This function returns the Node Object created, The mandatory parameters are the SPData object and the node position, the other parameters are optional and it will be set correctly. Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(1,1,1) var node = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 1 , 1 , 1 )); Remove node public static void Node_Remove ( SPData sPData , Node nodeToDelete ) This deletes a (shared/simple) node object from its branch, Example: //delete the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; Node_Remove ( sPData , node ); Node type public static void Node_Type ( SPData sPData , Node node , NodeType newNodeType ) This changes the node type, newNodeType is an enum, options available are smooth, free, broken Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Type ( SPData , node , NodeType . Smooth ); Node speed public static void Node_Speed ( SPData sPData , Node node , float speed ) This changes the node speed, Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node speed to 100 SplinePlusAPI . Node_Speed ( SPData , node , 100 ); Node normal public static void Node_Normal ( SPData sPData , Node node , float NormalFactor ) This changes the node normal factor, Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node normal to 90 SplinePlusAPI . Node_Normal ( SPData , node , 90 ); Duplicate node public static Node Node_Duplicate ( SPData sPData , Node originNode ) This duplicates a node object, The function returns the duplicate Node Object, Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Duplicate the node and catch the duplicate in a variable Node duplicateNode = SplinePlusAPI . Node_Duplicate ( SPData , node ); Connect 2 nodes public static int ConnectTwoNodes ( SPData SPData , Node node1 , Node node2 ) This creates a branch of the two nodes provided. The function returns the new branch key created. Example: //Creates node1 and node2 Node node1 = CreateNode ( SPData , Vector3 . zero ); Node node2 = CreateNode ( SPData , Vector3 . zero ); //create a branch that will hold node1 and node 2 and catch the branch key Int branchKey = SplinePlusAPI . ConnectTwoNodes ( SPData , node1 , node2 ); Shared nodes public static List Node SharedNodes ( SPData sPData ) This returns a list of all the shared nodes of the SPData object provided, Smooth shared node public static void SmoothSharedNode ( SPData sPData , Node node , float radius ) This smooths the shared node provided The radius value varies from [0,1]. Example: //get all the shared nodes of a sPData object var sharedNodes = SplinePlusAPI . SharedNodes ( sPData ); var node = sharedNodes [ 0 ] ; //Smooth the first shared node in the shared nodes list SplinePlusAPI . SmoothSharedNode ( sPData , node , 0.2f ); Smooth all shared nodes public static void SmoothAllSharedNodes ( SPData sPData , float radius ) This smooths all the shared nodes in the SPData object provided The radius value varies from [0,1]. Example: //Smooth all the shared nodes of the sPData object SplinePlusAPI . SmoothAllSharedNodes ( sPData , 0.2f ); Flip handles public static void FlipHandles ( SPData sPData , int BranchKey , int NodeIndex ) This flips the node handles, This can be used to tweak the curvature of the node provided, Instead of providing the node, this time you need to provide two variants, the branch key and the node index in the nodes list Example: //Flip the handles of the second node of the branch with key 0 SplinePlusAPI . FlipHandles ( sPData , 0 , 2 ) Close spline public static void CloseSpline ( SPData sPData ) Call this function to close the spline shape, This work only if the branches count is equal to one, if not then action will be canceled. Example: //Close the spline shape of the sPData object //This will work only if the branches count of sPData is equal or less than 1 SplinePlusAPI . CloseSpline ( sPData ) Selected node public static Node SelectedNode ( SPData sPData ) This function returns the selected node in the editor, This function is mostly used inside the editor to know what node used is currently selecting in scene view. Example: //Get the selected node in the Unity Scene view var selectedNode = SplinePlusAPI . SelectedNode ( sPData ) Branches Add branch public static int AddBranch ( SPData sPData , Node originNode ) This creates a new branch at a node , This function returns the key of the newly created branch Example: //get the node at branch key 2 and node index 3 var originNode = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //Add a new branch at originNode // originNode will be considered as the origin of the newly created branch int branchKey = SplinePlusAPI . AddBranch ( sPData , originNode ); //Access the newly created branch var branch = sPData . BranchesDict [ branchKey ] ; Add node to branch public static void AddNodeToBranch ( SPData sPData , int branchKey , Node nodeToAdd , bool beginning , bool autoAdd = false ) This adds a node to a branch, You need to provide the branch key to determine the branch where you want your node to be added to the nodeToAdd is the node that you want to add to your branch Set begining to true if you want to add the node at the begining of the branch, set it to false if you want to add the node to the end of the branch, Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be canceled AutoAdd is set to false by default , if you set it to true then the node will be added to the availabe fork (beginning or end) Example: //Create a node to add to the branch Node nodeToAdd = CreateNode ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add nodeToAdd to the branch of key 4 SplinePlusAPI . AddNodeToBranch ( sPData , 4 , nodeToAdd , false ); Delete branch public static void DeleteBranch ( SPData sPData , int branchKey ) This deletes a branch from the branches dictionnary You define the branch to delete by providing its key Example: //Delete branch of key 4 SplinePlusAPI . DeleteBranch ( sPData , 4 ); Break branch public static void BreakBranch ( SPData sPData , Node node ) This breaks the branch that has node provided, if the node provided is shared then action will have no impact Example: // get the node of branch with key 2 and node index 3 var node = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //break branch at node //if node is shared node then break action will be aborted SplinePlusAPI . BreakBranch ( sPData , node ); Reverse branch public static void ReverseBranch ( SPData sPData , int branchKey ) This reverses the branch direction, Example: //Reverse the branch with key 2 SplinePlusAPI . ReverseBranch ( sPData , 2 ); Followers Game object public static void Follower_GameObject ( Follower follower , GameObject followerGo ) Change the follower gameObject Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //change follower gameObject SplinePlusAPI . Follower_GameObject ( follower , followerGo ); } Speed public static void Follower_Speed ( Follower follower , float speed ) Change the follower speed Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Speed ( follower , 7 ); } Progress public static void Follower_Progress ( Follower follower , float progress ) Change the follower progress Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower progress to 0 SplinePlusAPI . Follower_Progress ( follower , 0 ); } Active public static void Follower_Active ( Follower follower , bool value ) Change the follower active statut Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation by setting its active statut to false SplinePlusAPI . Follower_Active ( follower , false ); } Animation type public static void Follower_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Change the follower animation type Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_AnimationType ( follower , FollowerAnimation . Auto ); }","title":"Methods"},{"location":"Unity3D/SplinePlus/API/Methods/#spline-plus-api","text":"All API methods are under the static class SplinePlusAPI, Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 ));","title":"Spline Plus API"},{"location":"Unity3D/SplinePlus/API/Methods/#create-spline-plus","text":"public static SPData CreateSplinePlus ( Vector3 position ) This creates a Spline Plus game object at a Vector3 position , this function returns the SPData object created, Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 ));","title":"Create Spline plus "},{"location":"Unity3D/SplinePlus/API/Methods/#nodes","text":"","title":"Nodes"},{"location":"Unity3D/SplinePlus/API/Methods/#create-node","text":"public static Node Node_Create ( SPData sPData , Vector3 pointPos , Vector3 point1Pos = new Vector3 (), Vector3 point2Pos = new Vector3 () , NodeType nodeType = NodeType . Smooth , SharedNodeType sharedNodeType = SharedNodeType . Random , int nodeSpeed = 100 , int nodeNormal = 0 , int left = - 1 , int right = - 1 , int forward = - 1 , int backward = - 1 , bool weld = true ) This generates a node object in a Vector3 position. This function returns the Node Object created, The mandatory parameters are the SPData object and the node position, the other parameters are optional and it will be set correctly. Example: // create a spline plus game object at Vector3(0,0,0) var sPData = SplinePlusAPI . CreateSplinePlus ( new Vector3 ( 0 , 0 , 0 )); // create a node at Vector3(1,1,1) var node = SplinePlusAPI . Node_Create ( sPData , new Vector3 ( 1 , 1 , 1 ));","title":"Create node"},{"location":"Unity3D/SplinePlus/API/Methods/#remove-node","text":"public static void Node_Remove ( SPData sPData , Node nodeToDelete ) This deletes a (shared/simple) node object from its branch, Example: //delete the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; Node_Remove ( sPData , node );","title":"Remove node"},{"location":"Unity3D/SplinePlus/API/Methods/#node-type","text":"public static void Node_Type ( SPData sPData , Node node , NodeType newNodeType ) This changes the node type, newNodeType is an enum, options available are smooth, free, broken Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node type to Smooth SplinePlusAPI . Node_Type ( SPData , node , NodeType . Smooth );","title":" Node type "},{"location":"Unity3D/SplinePlus/API/Methods/#node-speed","text":"public static void Node_Speed ( SPData sPData , Node node , float speed ) This changes the node speed, Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node speed to 100 SplinePlusAPI . Node_Speed ( SPData , node , 100 );","title":" Node speed "},{"location":"Unity3D/SplinePlus/API/Methods/#node-normal","text":"public static void Node_Normal ( SPData sPData , Node node , float NormalFactor ) This changes the node normal factor, Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Change node normal to 90 SplinePlusAPI . Node_Normal ( SPData , node , 90 );","title":"  Node normal "},{"location":"Unity3D/SplinePlus/API/Methods/#duplicate-node","text":"public static Node Node_Duplicate ( SPData sPData , Node originNode ) This duplicates a node object, The function returns the duplicate Node Object, Example: // Get the first node of the branch with key 0 var node = SPData . BranchesDict [ 0 ] . Nodes [ 0 ] ; //Duplicate the node and catch the duplicate in a variable Node duplicateNode = SplinePlusAPI . Node_Duplicate ( SPData , node );","title":"  Duplicate node "},{"location":"Unity3D/SplinePlus/API/Methods/#connect-2-nodes","text":"public static int ConnectTwoNodes ( SPData SPData , Node node1 , Node node2 ) This creates a branch of the two nodes provided. The function returns the new branch key created. Example: //Creates node1 and node2 Node node1 = CreateNode ( SPData , Vector3 . zero ); Node node2 = CreateNode ( SPData , Vector3 . zero ); //create a branch that will hold node1 and node 2 and catch the branch key Int branchKey = SplinePlusAPI . ConnectTwoNodes ( SPData , node1 , node2 );","title":" Connect  2 nodes "},{"location":"Unity3D/SplinePlus/API/Methods/#shared-nodes","text":"public static List Node SharedNodes ( SPData sPData ) This returns a list of all the shared nodes of the SPData object provided,","title":" Shared nodes "},{"location":"Unity3D/SplinePlus/API/Methods/#smooth-shared-node","text":"public static void SmoothSharedNode ( SPData sPData , Node node , float radius ) This smooths the shared node provided The radius value varies from [0,1]. Example: //get all the shared nodes of a sPData object var sharedNodes = SplinePlusAPI . SharedNodes ( sPData ); var node = sharedNodes [ 0 ] ; //Smooth the first shared node in the shared nodes list SplinePlusAPI . SmoothSharedNode ( sPData , node , 0.2f );","title":" Smooth shared node"},{"location":"Unity3D/SplinePlus/API/Methods/#smooth-all-shared-nodes","text":"public static void SmoothAllSharedNodes ( SPData sPData , float radius ) This smooths all the shared nodes in the SPData object provided The radius value varies from [0,1]. Example: //Smooth all the shared nodes of the sPData object SplinePlusAPI . SmoothAllSharedNodes ( sPData , 0.2f );","title":" Smooth all shared nodes "},{"location":"Unity3D/SplinePlus/API/Methods/#flip-handles","text":"public static void FlipHandles ( SPData sPData , int BranchKey , int NodeIndex ) This flips the node handles, This can be used to tweak the curvature of the node provided, Instead of providing the node, this time you need to provide two variants, the branch key and the node index in the nodes list Example: //Flip the handles of the second node of the branch with key 0 SplinePlusAPI . FlipHandles ( sPData , 0 , 2 )","title":"Flip handles"},{"location":"Unity3D/SplinePlus/API/Methods/#close-spline","text":"public static void CloseSpline ( SPData sPData ) Call this function to close the spline shape, This work only if the branches count is equal to one, if not then action will be canceled. Example: //Close the spline shape of the sPData object //This will work only if the branches count of sPData is equal or less than 1 SplinePlusAPI . CloseSpline ( sPData )","title":"Close spline"},{"location":"Unity3D/SplinePlus/API/Methods/#selected-node","text":"public static Node SelectedNode ( SPData sPData ) This function returns the selected node in the editor, This function is mostly used inside the editor to know what node used is currently selecting in scene view. Example: //Get the selected node in the Unity Scene view var selectedNode = SplinePlusAPI . SelectedNode ( sPData )","title":"Selected node "},{"location":"Unity3D/SplinePlus/API/Methods/#branches","text":"","title":"Branches"},{"location":"Unity3D/SplinePlus/API/Methods/#add-branch","text":"public static int AddBranch ( SPData sPData , Node originNode ) This creates a new branch at a node , This function returns the key of the newly created branch Example: //get the node at branch key 2 and node index 3 var originNode = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //Add a new branch at originNode // originNode will be considered as the origin of the newly created branch int branchKey = SplinePlusAPI . AddBranch ( sPData , originNode ); //Access the newly created branch var branch = sPData . BranchesDict [ branchKey ] ;","title":"Add branch "},{"location":"Unity3D/SplinePlus/API/Methods/#add-node-to-branch","text":"public static void AddNodeToBranch ( SPData sPData , int branchKey , Node nodeToAdd , bool beginning , bool autoAdd = false ) This adds a node to a branch, You need to provide the branch key to determine the branch where you want your node to be added to the nodeToAdd is the node that you want to add to your branch Set begining to true if you want to add the node at the begining of the branch, set it to false if you want to add the node to the end of the branch, Note Note that nodes adding to branches can only be done to unwelded forks , all nodes adding actions to welded forkes are going to be canceled AutoAdd is set to false by default , if you set it to true then the node will be added to the availabe fork (beginning or end) Example: //Create a node to add to the branch Node nodeToAdd = CreateNode ( SPData , new Vector3 ( 10 , 5 , 10 )); //Add nodeToAdd to the branch of key 4 SplinePlusAPI . AddNodeToBranch ( sPData , 4 , nodeToAdd , false );","title":"Add node to branch"},{"location":"Unity3D/SplinePlus/API/Methods/#delete-branch","text":"public static void DeleteBranch ( SPData sPData , int branchKey ) This deletes a branch from the branches dictionnary You define the branch to delete by providing its key Example: //Delete branch of key 4 SplinePlusAPI . DeleteBranch ( sPData , 4 );","title":" Delete branch "},{"location":"Unity3D/SplinePlus/API/Methods/#break-branch","text":"public static void BreakBranch ( SPData sPData , Node node ) This breaks the branch that has node provided, if the node provided is shared then action will have no impact Example: // get the node of branch with key 2 and node index 3 var node = SPData . BranchesDict [ 2 ] . Nodes [ 3 ] ; //break branch at node //if node is shared node then break action will be aborted SplinePlusAPI . BreakBranch ( sPData , node );","title":" Break branch "},{"location":"Unity3D/SplinePlus/API/Methods/#reverse-branch","text":"public static void ReverseBranch ( SPData sPData , int branchKey ) This reverses the branch direction, Example: //Reverse the branch with key 2 SplinePlusAPI . ReverseBranch ( sPData , 2 );","title":"  Reverse branch "},{"location":"Unity3D/SplinePlus/API/Methods/#followers","text":"","title":"Followers"},{"location":"Unity3D/SplinePlus/API/Methods/#game-object","text":"public static void Follower_GameObject ( Follower follower , GameObject followerGo ) Change the follower gameObject Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //change follower gameObject SplinePlusAPI . Follower_GameObject ( follower , followerGo ); }","title":"Game object"},{"location":"Unity3D/SplinePlus/API/Methods/#speed","text":"public static void Follower_Speed ( Follower follower , float speed ) Change the follower speed Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower speed to 7 SplinePlusAPI . Follower_Speed ( follower , 7 ); }","title":"Speed "},{"location":"Unity3D/SplinePlus/API/Methods/#progress","text":"public static void Follower_Progress ( Follower follower , float progress ) Change the follower progress Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //set follower progress to 0 SplinePlusAPI . Follower_Progress ( follower , 0 ); }","title":"Progress "},{"location":"Unity3D/SplinePlus/API/Methods/#active","text":"public static void Follower_Active ( Follower follower , bool value ) Change the follower active statut Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Stop follower animation by setting its active statut to false SplinePlusAPI . Follower_Active ( follower , false ); }","title":"Active "},{"location":"Unity3D/SplinePlus/API/Methods/#animation-type","text":"public static void Follower_AnimationType ( Follower follower , FollowerAnimation followerAnimation ) Change the follower animation type Example: SPData sPData ; GameObject followerGo ; public void Start () { sPData = GetComponent SplinePlus (). SPData ; //Access follower with index 0 Follower follower = sPData . Followers [ 0 ] ; //Set follower animation type to auto SplinePlusAPI . Follower_AnimationType ( follower , FollowerAnimation . Auto ); }","title":"Animation type "},{"location":"UnrealEngine/SplinePlus/Introduction/","text":"img { display: block; margin-left: auto; margin-right: auto; } Under developement","title":"Introduction"},{"location":"UnrealEngine/SplinePlus/Introduction/#under-developement","text":"","title":"Under developement"}]}